
Modbus_Master_v.1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800354c  0800354c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003554  08003554  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800355c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000012bc  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001318  20001318  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012577  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002671  00000000  00000000  00032646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000091ab  00000000  00000000  00034cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d18  00000000  00000000  0003de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000a4c  00000000  00000000  0003eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00022013  00000000  00000000  0003f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00016790  00000000  00000000  000615df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cc0c8  00000000  00000000  00077d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00002744  00000000  00000000  00143e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000046  00000000  00000000  0014657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032d0 	.word	0x080032d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080032d0 	.word	0x080032d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <CRC16Calculator>:
  * @brief crc16 calculator
  * @param buffer pointer, length
  * @retval crc value
  */
uint16_t CRC16Calculator(uint8_t *buffer, uint16_t length)
{
 800056c:	b500      	push	{lr}
	//will defined start parameters
	uint8_t crcHi 	= 0xFF;
	uint8_t crcLo 	= 0xFF;
 800056e:	22ff      	movs	r2, #255	; 0xff
	uint8_t crcHi 	= 0xFF;
 8000570:	4696      	mov	lr, r2
	int index		= 0;
	//until the data lenght
	while(length --)
 8000572:	e00a      	b.n	800058a <CRC16Calculator+0x1e>
	{
		//crc calculating
		index = crcLo ^ *buffer++;
 8000574:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000578:	4053      	eors	r3, r2
		crcLo = crcHi ^ Table_CRC_Hi[index];
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <CRC16Calculator+0x30>)
 800057c:	5cd2      	ldrb	r2, [r2, r3]
 800057e:	ea82 020e 	eor.w	r2, r2, lr
		crcHi = Table_CRC_Lo[index];
 8000582:	4907      	ldr	r1, [pc, #28]	; (80005a0 <CRC16Calculator+0x34>)
 8000584:	f811 e003 	ldrb.w	lr, [r1, r3]
	while(length --)
 8000588:	4661      	mov	r1, ip
 800058a:	1e4b      	subs	r3, r1, #1
 800058c:	fa1f fc83 	uxth.w	ip, r3
 8000590:	2900      	cmp	r1, #0
 8000592:	d1ef      	bne.n	8000574 <CRC16Calculator+0x8>
	}
	//Will be sent after collected by crclow table
	return (crcHi << 8) | crcLo;

}
 8000594:	ea42 200e 	orr.w	r0, r2, lr, lsl #8
 8000598:	f85d fb04 	ldr.w	pc, [sp], #4
 800059c:	080032e8 	.word	0x080032e8
 80005a0:	080033e8 	.word	0x080033e8

080005a4 <ModbusInit>:
  * @param modbus pointer
  * @retval void
  */
void ModbusInit(Modbus_t *modbus)
{
	modbus->mode								= RTU;
 80005a4:	2301      	movs	r3, #1
 80005a6:	f880 3414 	strb.w	r3, [r0, #1044]	; 0x414
	modbus->state								= IDLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f880 3415 	strb.w	r3, [r0, #1045]	; 0x415
	modbus->errorCode							= NoError;
 80005b0:	f880 3416 	strb.w	r3, [r0, #1046]	; 0x416
	modbus->txMessage.txIndex					= 0;
 80005b4:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
	modbus->txMessage.newSendMessageStatus		= false;
 80005b8:	f880 3412 	strb.w	r3, [r0, #1042]	; 0x412
	modbus->rxMessage.newReceiveMessageStatus	= false;
 80005bc:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
}
 80005c0:	4770      	bx	lr

080005c2 <ModbusElementsEqual>:
  * @param tx pointer, rx pointer, , number Of Elemets
  * @retval bool
  */
bool ModbusElementsEqual(uint8_t *txArray, uint8_t *rxArray, uint8_t numberOfElements)
{
	for(int i=0; i < numberOfElements; i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dd0e      	ble.n	80005e6 <ModbusElementsEqual+0x24>
{
 80005c8:	b500      	push	{lr}
	{
		if(txArray[i] != rxArray[i])
 80005ca:	f810 e003 	ldrb.w	lr, [r0, r3]
 80005ce:	f811 c003 	ldrb.w	ip, [r1, r3]
 80005d2:	45e6      	cmp	lr, ip
 80005d4:	d105      	bne.n	80005e2 <ModbusElementsEqual+0x20>
	for(int i=0; i < numberOfElements; i++)
 80005d6:	3301      	adds	r3, #1
 80005d8:	429a      	cmp	r2, r3
 80005da:	dcf6      	bgt.n	80005ca <ModbusElementsEqual+0x8>
			return false;
	}
	return true;
 80005dc:	2001      	movs	r0, #1
}
 80005de:	f85d fb04 	ldr.w	pc, [sp], #4
			return false;
 80005e2:	2000      	movs	r0, #0
 80005e4:	e7fb      	b.n	80005de <ModbusElementsEqual+0x1c>
	return true;
 80005e6:	2001      	movs	r0, #1
}
 80005e8:	4770      	bx	lr
	...

080005ec <ModbusMasterWrite>:
  * @brief modbus write uart function
  * @param buffer pointer, lenght
  * @retval uint8_t
  */
uint8_t ModbusMasterWrite(Uart_Comm_t *uart, uint8_t *buffer, uint16_t lenght)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
 80005ee:	460d      	mov	r5, r1
 80005f0:	4614      	mov	r4, r2

//	UartX_WriteString(&uartComm, &buffer);


	while(lenght)
 80005f2:	e006      	b.n	8000602 <ModbusMasterWrite+0x16>
	{
		UartX_WriteSingleChar(&uartComm, *buffer);
 80005f4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <ModbusMasterWrite+0x24>)
 80005fa:	f000 fbad 	bl	8000d58 <UartX_WriteSingleChar>
		buffer++;
		lenght--;
 80005fe:	3c01      	subs	r4, #1
 8000600:	b2a4      	uxth	r4, r4
	while(lenght)
 8000602:	2c00      	cmp	r4, #0
 8000604:	d1f6      	bne.n	80005f4 <ModbusMasterWrite+0x8>
	}

	UartX_WriteIntControl(&uartComm);
 8000606:	4802      	ldr	r0, [pc, #8]	; (8000610 <ModbusMasterWrite+0x24>)
 8000608:	f000 fbd4 	bl	8000db4 <UartX_WriteIntControl>


	return 1;
}
 800060c:	2001      	movs	r0, #1
 800060e:	bd38      	pop	{r3, r4, r5, pc}
 8000610:	200004f0 	.word	0x200004f0

08000614 <ModbusMasterControl>:
{
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	4604      	mov	r4, r0
	switch(modbus->state)
 8000618:	f890 5415 	ldrb.w	r5, [r0, #1045]	; 0x415
 800061c:	2d04      	cmp	r5, #4
 800061e:	f200 8095 	bhi.w	800074c <ModbusMasterControl+0x138>
 8000622:	e8df f015 	tbh	[pc, r5, lsl #1]
 8000626:	0005      	.short	0x0005
 8000628:	01c8001c 	.word	0x01c8001c
 800062c:	02f001f3 	.word	0x02f001f3
			if(modbus->txMessage.newSendMessageStatus && TickTimerCheckElapsedTime(&idleTime))
 8000630:	f890 3412 	ldrb.w	r3, [r0, #1042]	; 0x412
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 8089 	beq.w	800074c <ModbusMasterControl+0x138>
 800063a:	48ce      	ldr	r0, [pc, #824]	; (8000974 <ModbusMasterControl+0x360>)
 800063c:	f000 fb5c 	bl	8000cf8 <TickTimerCheckElapsedTime>
 8000640:	2800      	cmp	r0, #0
 8000642:	f000 8083 	beq.w	800074c <ModbusMasterControl+0x138>
				modbus->txMessage.newSendMessageStatus = false;
 8000646:	2300      	movs	r3, #0
 8000648:	f884 3412 	strb.w	r3, [r4, #1042]	; 0x412
				modbus->state				= SendRequest;
 800064c:	2201      	movs	r2, #1
 800064e:	f884 2415 	strb.w	r2, [r4, #1045]	; 0x415
				modbus->txMessage.txIndex	= 0;
 8000652:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
				TickTimerStopTime(&idleTime);
 8000656:	48c7      	ldr	r0, [pc, #796]	; (8000974 <ModbusMasterControl+0x360>)
 8000658:	f000 fb4a 	bl	8000cf0 <TickTimerStopTime>
 800065c:	e076      	b.n	800074c <ModbusMasterControl+0x138>
			modbus->txMessage.txData[modbus->txMessage.txIndex++]	= modbus->txMessage.slaveAddress;
 800065e:	f890 240f 	ldrb.w	r2, [r0, #1039]	; 0x40f
 8000662:	1c53      	adds	r3, r2, #1
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 800066a:	f890 1114 	ldrb.w	r1, [r0, #276]	; 0x114
 800066e:	4402      	add	r2, r0
 8000670:	f882 1313 	strb.w	r1, [r2, #787]	; 0x313
			modbus->txMessage.txData[modbus->txMessage.txIndex++]	= modbus->txMessage.functionCode;
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	b2d2      	uxtb	r2, r2
 8000678:	f880 240f 	strb.w	r2, [r0, #1039]	; 0x40f
 800067c:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
 8000680:	4403      	add	r3, r0
 8000682:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
			switch (modbus->txMessage.functionCode)
 8000686:	1e4b      	subs	r3, r1, #1
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d832      	bhi.n	80006f2 <ModbusMasterControl+0xde>
 800068c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000690:	00810010 	.word	0x00810010
 8000694:	00a3005f 	.word	0x00a3005f
 8000698:	00e700c5 	.word	0x00e700c5
 800069c:	00310031 	.word	0x00310031
 80006a0:	00310031 	.word	0x00310031
 80006a4:	00310031 	.word	0x00310031
 80006a8:	00310031 	.word	0x00310031
 80006ac:	01450109 	.word	0x01450109
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 80006b0:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
 80006b4:	1c53      	adds	r3, r2, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 80006bc:	0a08      	lsrs	r0, r1, #8
 80006be:	4422      	add	r2, r4
 80006c0:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80006cc:	4423      	add	r3, r4
 80006ce:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.numOfRegisters);
 80006d2:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80006d6:	1c53      	adds	r3, r2, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 80006de:	0a08      	lsrs	r0, r1, #8
 80006e0:	4422      	add	r2, r4
 80006e2:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.numOfRegisters);
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80006ec:	4423      	add	r3, r4
 80006ee:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
			modbus->txMessage.crc16 = 0xFF;
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	f8a4 3410 	strh.w	r3, [r4, #1040]	; 0x410
			modbus->txMessage.crc16 = CRC16Calculator(modbus->txMessage.txData, modbus->txMessage.txIndex);
 80006f8:	f204 3513 	addw	r5, r4, #787	; 0x313
 80006fc:	f894 140f 	ldrb.w	r1, [r4, #1039]	; 0x40f
 8000700:	4628      	mov	r0, r5
 8000702:	f7ff ff33 	bl	800056c <CRC16Calculator>
 8000706:	f8a4 0410 	strh.w	r0, [r4, #1040]	; 0x410
			modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.crc16);
 800070a:	f894 240f 	ldrb.w	r2, [r4, #1039]	; 0x40f
 800070e:	1c53      	adds	r3, r2, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 8000716:	4422      	add	r2, r4
 8000718:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
			modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.crc16);
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000722:	0a00      	lsrs	r0, r0, #8
 8000724:	4423      	add	r3, r4
 8000726:	f883 0313 	strb.w	r0, [r3, #787]	; 0x313
			RingBufferClearData(&usartCommReceiveBuff);
 800072a:	4893      	ldr	r0, [pc, #588]	; (8000978 <ModbusMasterControl+0x364>)
 800072c:	f000 faca 	bl	8000cc4 <RingBufferClearData>
			ModbusMasterWrite(&uartComm, modbus->txMessage.txData, modbus->txMessage.txIndex);
 8000730:	f894 240f 	ldrb.w	r2, [r4, #1039]	; 0x40f
 8000734:	4629      	mov	r1, r5
 8000736:	4891      	ldr	r0, [pc, #580]	; (800097c <ModbusMasterControl+0x368>)
 8000738:	f7ff ff58 	bl	80005ec <ModbusMasterWrite>
			TickTimerSetTime(&waitResponseTime, 3000);
 800073c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000740:	488f      	ldr	r0, [pc, #572]	; (8000980 <ModbusMasterControl+0x36c>)
 8000742:	f000 facb 	bl	8000cdc <TickTimerSetTime>
			modbus->state = WaitingForReply;
 8000746:	2302      	movs	r3, #2
 8000748:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
}
 800074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 800074e:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
 8000752:	1c53      	adds	r3, r2, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 800075a:	0a08      	lsrs	r0, r1, #8
 800075c:	4422      	add	r2, r4
 800075e:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 800076a:	4423      	add	r3, r4
 800076c:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.numOfRegisters);
 8000770:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 8000774:	1c53      	adds	r3, r2, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 800077c:	0a08      	lsrs	r0, r1, #8
 800077e:	4422      	add	r2, r4
 8000780:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.numOfRegisters);
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 800078a:	4423      	add	r3, r4
 800078c:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					break;
 8000790:	e7af      	b.n	80006f2 <ModbusMasterControl+0xde>
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 8000792:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
 8000796:	1c53      	adds	r3, r2, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 800079e:	0a08      	lsrs	r0, r1, #8
 80007a0:	4422      	add	r2, r4
 80007a2:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80007ae:	4423      	add	r3, r4
 80007b0:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.numOfRegisters);
 80007b4:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80007b8:	1c53      	adds	r3, r2, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 80007c0:	0a08      	lsrs	r0, r1, #8
 80007c2:	4422      	add	r2, r4
 80007c4:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.numOfRegisters);
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80007ce:	4423      	add	r3, r4
 80007d0:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					break;
 80007d4:	e78d      	b.n	80006f2 <ModbusMasterControl+0xde>
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 80007d6:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
 80007da:	1c53      	adds	r3, r2, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 80007e2:	0a08      	lsrs	r0, r1, #8
 80007e4:	4422      	add	r2, r4
 80007e6:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80007f2:	4423      	add	r3, r4
 80007f4:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.numOfRegisters);
 80007f8:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80007fc:	1c53      	adds	r3, r2, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 8000804:	0a08      	lsrs	r0, r1, #8
 8000806:	4422      	add	r2, r4
 8000808:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.numOfRegisters);
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000812:	4423      	add	r3, r4
 8000814:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					break;
 8000818:	e76b      	b.n	80006f2 <ModbusMasterControl+0xde>
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 800081a:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
 800081e:	1c53      	adds	r3, r2, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 8000826:	0a08      	lsrs	r0, r1, #8
 8000828:	4422      	add	r2, r4
 800082a:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000836:	4423      	add	r3, r4
 8000838:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.writeData[0]);
 800083c:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
 8000840:	1c53      	adds	r3, r2, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 8000848:	0a08      	lsrs	r0, r1, #8
 800084a:	4422      	add	r2, r4
 800084c:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.writeData[0]);
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000856:	4423      	add	r3, r4
 8000858:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					break;
 800085c:	e749      	b.n	80006f2 <ModbusMasterControl+0xde>
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 800085e:	f8b0 1116 	ldrh.w	r1, [r0, #278]	; 0x116
 8000862:	1c53      	adds	r3, r2, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f880 340f 	strb.w	r3, [r0, #1039]	; 0x40f
 800086a:	0a08      	lsrs	r0, r1, #8
 800086c:	4422      	add	r2, r4
 800086e:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 800087a:	4423      	add	r3, r4
 800087c:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.writeData[0]);
 8000880:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
 8000884:	1c53      	adds	r3, r2, #1
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 800088c:	0a08      	lsrs	r0, r1, #8
 800088e:	4422      	add	r2, r4
 8000890:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.writeData[0]);
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 800089a:	4423      	add	r3, r4
 800089c:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					break;
 80008a0:	e727      	b.n	80006f2 <ModbusMasterControl+0xde>
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 80008a2:	f8b0 0116 	ldrh.w	r0, [r0, #278]	; 0x116
 80008a6:	1c51      	adds	r1, r2, #1
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	f884 140f 	strb.w	r1, [r4, #1039]	; 0x40f
 80008ae:	0a03      	lsrs	r3, r0, #8
 80008b0:	4422      	add	r2, r4
 80008b2:	f882 3313 	strb.w	r3, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 80008b6:	1c4b      	adds	r3, r1, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 80008be:	4421      	add	r1, r4
 80008c0:	f881 0313 	strb.w	r0, [r1, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.numOfRegisters);
 80008c4:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80008d0:	0a08      	lsrs	r0, r1, #8
 80008d2:	4423      	add	r3, r4
 80008d4:	f883 0313 	strb.w	r0, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.numOfRegisters);
 80008d8:	1c53      	adds	r3, r2, #1
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 80008e0:	4422      	add	r2, r4
 80008e2:	f882 1313 	strb.w	r1, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.writeData[0]);	//bayt sayısı
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80008ee:	f894 111a 	ldrb.w	r1, [r4, #282]	; 0x11a
 80008f2:	4423      	add	r3, r4
 80008f4:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.writeData[1]);
 80008f8:	f8b4 111c 	ldrh.w	r1, [r4, #284]	; 0x11c
 80008fc:	1c53      	adds	r3, r2, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 8000904:	0a08      	lsrs	r0, r1, #8
 8000906:	4422      	add	r2, r4
 8000908:	f882 0313 	strb.w	r0, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.writeData[1]);
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000912:	4423      	add	r3, r4
 8000914:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					break;
 8000918:	e6eb      	b.n	80006f2 <ModbusMasterControl+0xde>
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.startAddress);
 800091a:	f8b0 0116 	ldrh.w	r0, [r0, #278]	; 0x116
 800091e:	1c51      	adds	r1, r2, #1
 8000920:	b2c9      	uxtb	r1, r1
 8000922:	f884 140f 	strb.w	r1, [r4, #1039]	; 0x40f
 8000926:	0a03      	lsrs	r3, r0, #8
 8000928:	4422      	add	r2, r4
 800092a:	f882 3313 	strb.w	r3, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.startAddress);
 800092e:	1c4b      	adds	r3, r1, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 8000936:	4421      	add	r1, r4
 8000938:	f881 0313 	strb.w	r0, [r1, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.numOfRegisters);
 800093c:	f8b4 c118 	ldrh.w	ip, [r4, #280]	; 0x118
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000948:	ea4f 211c 	mov.w	r1, ip, lsr #8
 800094c:	4423      	add	r3, r4
 800094e:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.numOfRegisters);
 8000952:	1c53      	adds	r3, r2, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 800095a:	4422      	add	r2, r4
 800095c:	f882 c313 	strb.w	ip, [r2, #787]	; 0x313
					modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.writeData[0]);	//bayt sayısı
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 8000966:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
 800096a:	4423      	add	r3, r4
 800096c:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
					for(int d=1; d <= modbus->txMessage.numOfRegisters; d++)
 8000970:	2101      	movs	r1, #1
 8000972:	e01d      	b.n	80009b0 <ModbusMasterControl+0x39c>
 8000974:	200000cc 	.word	0x200000cc
 8000978:	200004fc 	.word	0x200004fc
 800097c:	200004f0 	.word	0x200004f0
 8000980:	200000dc 	.word	0x200000dc
						modbus->txMessage.txData[modbus->txMessage.txIndex++]	= MSB(modbus->txMessage.writeData[d]);
 8000984:	f101 0388 	add.w	r3, r1, #136	; 0x88
 8000988:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800098c:	8958      	ldrh	r0, [r3, #10]
 800098e:	f894 240f 	ldrb.w	r2, [r4, #1039]	; 0x40f
 8000992:	1c53      	adds	r3, r2, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f884 340f 	strb.w	r3, [r4, #1039]	; 0x40f
 800099a:	0a05      	lsrs	r5, r0, #8
 800099c:	4422      	add	r2, r4
 800099e:	f882 5313 	strb.w	r5, [r2, #787]	; 0x313
						modbus->txMessage.txData[modbus->txMessage.txIndex++]	= LSB(modbus->txMessage.writeData[d]);
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	f884 240f 	strb.w	r2, [r4, #1039]	; 0x40f
 80009a8:	4423      	add	r3, r4
 80009aa:	f883 0313 	strb.w	r0, [r3, #787]	; 0x313
					for(int d=1; d <= modbus->txMessage.numOfRegisters; d++)
 80009ae:	3101      	adds	r1, #1
 80009b0:	458c      	cmp	ip, r1
 80009b2:	dae7      	bge.n	8000984 <ModbusMasterControl+0x370>
 80009b4:	e69d      	b.n	80006f2 <ModbusMasterControl+0xde>
			if(usartCommReceiveBuff.writePoint > 2)
 80009b6:	4b9a      	ldr	r3, [pc, #616]	; (8000c20 <ModbusMasterControl+0x60c>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d902      	bls.n	80009c4 <ModbusMasterControl+0x3b0>
				modbus->rxMessage.newReceiveMessageStatus = true;
 80009be:	2301      	movs	r3, #1
 80009c0:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
			if(modbus->rxMessage.newReceiveMessageStatus)
 80009c4:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 80009c8:	b19b      	cbz	r3, 80009f2 <ModbusMasterControl+0x3de>
				modbus->rxMessage.slaveAddress = usartCommReceiveBuff.pBuffer[SLAVE_ADDRESS];
 80009ca:	4b95      	ldr	r3, [pc, #596]	; (8000c20 <ModbusMasterControl+0x60c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
				if((modbus->rxMessage.slaveAddress == modbus->txMessage.slaveAddress)
 80009d4:	f894 2114 	ldrb.w	r2, [r4, #276]	; 0x114
 80009d8:	4293      	cmp	r3, r2
 80009da:	d106      	bne.n	80009ea <ModbusMasterControl+0x3d6>
					modbus->state = ProcessingReply;
 80009dc:	2303      	movs	r3, #3
 80009de:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
					modbus->rxMessage.newReceiveMessageStatus=false;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
 80009e8:	e6b0      	b.n	800074c <ModbusMasterControl+0x138>
					RingBufferClearData(&usartCommReceiveBuff);
 80009ea:	488d      	ldr	r0, [pc, #564]	; (8000c20 <ModbusMasterControl+0x60c>)
 80009ec:	f000 f96a 	bl	8000cc4 <RingBufferClearData>
 80009f0:	e6ac      	b.n	800074c <ModbusMasterControl+0x138>
				if(TickTimerCheckElapsedTime(&waitResponseTime))
 80009f2:	488c      	ldr	r0, [pc, #560]	; (8000c24 <ModbusMasterControl+0x610>)
 80009f4:	f000 f980 	bl	8000cf8 <TickTimerCheckElapsedTime>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	f43f aea7 	beq.w	800074c <ModbusMasterControl+0x138>
					modbus->errorCode	= TimeOutError;
 80009fe:	2307      	movs	r3, #7
 8000a00:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
					modbus->state		= ProcessingError;
 8000a04:	2304      	movs	r3, #4
 8000a06:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
 8000a0a:	e69f      	b.n	800074c <ModbusMasterControl+0x138>
			modbus->rxMessage.functionCode = usartCommReceiveBuff.pBuffer[FUNCTION_CODE];
 8000a0c:	4b84      	ldr	r3, [pc, #528]	; (8000c20 <ModbusMasterControl+0x60c>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	7853      	ldrb	r3, [r2, #1]
 8000a12:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
			if((modbus->rxMessage.functionCode & 0x7F) != modbus->txMessage.functionCode)
 8000a16:	f890 0115 	ldrb.w	r0, [r0, #277]	; 0x115
 8000a1a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8000a1e:	4288      	cmp	r0, r1
 8000a20:	d005      	beq.n	8000a2e <ModbusMasterControl+0x41a>
				modbus->errorCode 	= InvalidFunctionError;
 8000a22:	2101      	movs	r1, #1
 8000a24:	f884 1416 	strb.w	r1, [r4, #1046]	; 0x416
				modbus->state		= ProcessingError;
 8000a28:	2104      	movs	r1, #4
 8000a2a:	f884 1415 	strb.w	r1, [r4, #1045]	; 0x415
			if(BIT_READ(modbus->rxMessage.functionCode, 7))
 8000a2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a32:	d148      	bne.n	8000ac6 <ModbusMasterControl+0x4b2>
			if((modbus->rxMessage.messageLenght == 0) && (modbus->rxMessage.functionCode <= ReadInputRegisters))
 8000a34:	7821      	ldrb	r1, [r4, #0]
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d14c      	bne.n	8000ad4 <ModbusMasterControl+0x4c0>
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d84a      	bhi.n	8000ad4 <ModbusMasterControl+0x4c0>
				modbus->rxMessage.messageLenght = usartCommReceiveBuff.pBuffer[LENGTH_CODE] + 5;
 8000a3e:	7893      	ldrb	r3, [r2, #2]
 8000a40:	3305      	adds	r3, #5
 8000a42:	7023      	strb	r3, [r4, #0]
			if(usartCommReceiveBuff.writePoint >= modbus->rxMessage.messageLenght
 8000a44:	4b76      	ldr	r3, [pc, #472]	; (8000c20 <ModbusMasterControl+0x60c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	7822      	ldrb	r2, [r4, #0]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	f4ff ae7e 	bcc.w	800074c <ModbusMasterControl+0x138>
					&& modbus->rxMessage.messageLenght != 0)
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	f43f ae7b 	beq.w	800074c <ModbusMasterControl+0x138>
				modbus->rxMessage.crc16 = 0xFFFF;
 8000a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a5a:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
				memcpy(modbus->rxMessage.rxData, usartCommReceiveBuff.pBuffer, modbus->rxMessage.messageLenght);
 8000a5e:	1c66      	adds	r6, r4, #1
 8000a60:	4f6f      	ldr	r7, [pc, #444]	; (8000c20 <ModbusMasterControl+0x60c>)
 8000a62:	6839      	ldr	r1, [r7, #0]
 8000a64:	4630      	mov	r0, r6
 8000a66:	f001 ffe3 	bl	8002a30 <memcpy>
				modbus->rxMessage.rxIndex = usartCommReceiveBuff.writePoint;
 8000a6a:	7939      	ldrb	r1, [r7, #4]
 8000a6c:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
				modbus->rxMessage.messageLenght = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	7023      	strb	r3, [r4, #0]
				modbus->rxMessage.crc16 = CRC16Calculator(modbus->rxMessage.rxData, (modbus->rxMessage.rxIndex - 2));
 8000a74:	3902      	subs	r1, #2
 8000a76:	b289      	uxth	r1, r1
 8000a78:	4630      	mov	r0, r6
 8000a7a:	f7ff fd77 	bl	800056c <CRC16Calculator>
 8000a7e:	f8a4 0110 	strh.w	r0, [r4, #272]	; 0x110
				if((LSB(modbus->rxMessage.crc16) != modbus->rxMessage.rxData[modbus->rxMessage.rxIndex - 2])
 8000a82:	b2c1      	uxtb	r1, r0
 8000a84:	f894 2101 	ldrb.w	r2, [r4, #257]	; 0x101
 8000a88:	1e93      	subs	r3, r2, #2
 8000a8a:	4423      	add	r3, r4
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d02c      	beq.n	8000aec <ModbusMasterControl+0x4d8>
					modbus->errorCode = InvalidCRC;
 8000a92:	2306      	movs	r3, #6
 8000a94:	f884 3416 	strb.w	r3, [r4, #1046]	; 0x416
					modbus->state = ProcessingError;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
				if(modbus->state != ProcessingError)
 8000a9e:	f894 3415 	ldrb.w	r3, [r4, #1045]	; 0x415
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	f43f ae52 	beq.w	800074c <ModbusMasterControl+0x138>
					switch (modbus->rxMessage.functionCode)
 8000aa8:	f894 3103 	ldrb.w	r3, [r4, #259]	; 0x103
 8000aac:	1e5a      	subs	r2, r3, #1
 8000aae:	2a0f      	cmp	r2, #15
 8000ab0:	d83d      	bhi.n	8000b2e <ModbusMasterControl+0x51a>
 8000ab2:	e8df f002 	tbb	[pc, r2]
 8000ab6:	402e      	.short	0x402e
 8000ab8:	8b6e465a 	.word	0x8b6e465a
 8000abc:	3c3c3c3c 	.word	0x3c3c3c3c
 8000ac0:	3c3c3c3c 	.word	0x3c3c3c3c
 8000ac4:	9b7e      	.short	0x9b7e
				modbus->errorCode = usartCommReceiveBuff.pBuffer[EXCEPTION_CODE];
 8000ac6:	7891      	ldrb	r1, [r2, #2]
 8000ac8:	f884 1416 	strb.w	r1, [r4, #1046]	; 0x416
				modbus->state = ProcessingError;
 8000acc:	2104      	movs	r1, #4
 8000ace:	f884 1415 	strb.w	r1, [r4, #1045]	; 0x415
 8000ad2:	e7af      	b.n	8000a34 <ModbusMasterControl+0x420>
			else if(modbus->rxMessage.functionCode >= WriteForceSingleCoil)
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d9b5      	bls.n	8000a44 <ModbusMasterControl+0x430>
				modbus->rxMessage.messageLenght = modbus->txMessage.txIndex;
 8000ad8:	f894 240f 	ldrb.w	r2, [r4, #1039]	; 0x40f
 8000adc:	7022      	strb	r2, [r4, #0]
				if((modbus->rxMessage.functionCode == WriteForceMultipleCoils) || (modbus->rxMessage.functionCode == WritePresetMultipleRegisters))
 8000ade:	3b0f      	subs	r3, #15
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d8ae      	bhi.n	8000a44 <ModbusMasterControl+0x430>
					modbus->rxMessage.messageLenght = 8;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	7023      	strb	r3, [r4, #0]
 8000aea:	e7ab      	b.n	8000a44 <ModbusMasterControl+0x430>
						|| (MSB(modbus->rxMessage.crc16)!= modbus->rxMessage.rxData[modbus->rxMessage.rxIndex - 1]))
 8000aec:	1e53      	subs	r3, r2, #1
 8000aee:	4423      	add	r3, r4
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8000af6:	d1cc      	bne.n	8000a92 <ModbusMasterControl+0x47e>
 8000af8:	e7d1      	b.n	8000a9e <ModbusMasterControl+0x48a>
								degerler2[i] = (uint8_t)(modbus->rxMessage.rxData[3] >> i & 0x01);
 8000afa:	7923      	ldrb	r3, [r4, #4]
 8000afc:	4113      	asrs	r3, r2
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	4949      	ldr	r1, [pc, #292]	; (8000c28 <ModbusMasterControl+0x614>)
 8000b04:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
							for(int i=0; i<8; i++)
 8000b08:	3201      	adds	r2, #1
 8000b0a:	2a07      	cmp	r2, #7
 8000b0c:	ddf5      	ble.n	8000afa <ModbusMasterControl+0x4e6>
							for(int k=8; k<16; k++)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	e00b      	b.n	8000b2a <ModbusMasterControl+0x516>
 8000b12:	2200      	movs	r2, #0
 8000b14:	e7f9      	b.n	8000b0a <ModbusMasterControl+0x4f6>
								degerler2[k] = (uint8_t)(modbus->rxMessage.rxData[4] >> (k-8) & 0x01);
 8000b16:	7963      	ldrb	r3, [r4, #5]
 8000b18:	f1a2 0108 	sub.w	r1, r2, #8
 8000b1c:	410b      	asrs	r3, r1
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	4941      	ldr	r1, [pc, #260]	; (8000c28 <ModbusMasterControl+0x614>)
 8000b24:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
							for(int k=8; k<16; k++)
 8000b28:	3201      	adds	r2, #1
 8000b2a:	2a0f      	cmp	r2, #15
 8000b2c:	ddf3      	ble.n	8000b16 <ModbusMasterControl+0x502>
					modbus->state = IDLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f884 3415 	strb.w	r3, [r4, #1045]	; 0x415
 8000b34:	e60a      	b.n	800074c <ModbusMasterControl+0x138>
							sonuc = BIT_READ(modbus->rxMessage.rxData[3], 0);
 8000b36:	7923      	ldrb	r3, [r4, #4]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <ModbusMasterControl+0x618>)
 8000b3e:	7013      	strb	r3, [r2, #0]
							break;
 8000b40:	e7f5      	b.n	8000b2e <ModbusMasterControl+0x51a>
							uint8_t dataLen = modbus->rxMessage.rxData[2] / 2;
 8000b42:	78e0      	ldrb	r0, [r4, #3]
 8000b44:	0840      	lsrs	r0, r0, #1
							for(int i=0; i<dataLen; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	ddf0      	ble.n	8000b2e <ModbusMasterControl+0x51a>
								degerler[i] = (modbus->rxMessage.rxData[index + i + 1])|(modbus->rxMessage.rxData[index + i] << 8);
 8000b4c:	18ea      	adds	r2, r5, r3
 8000b4e:	1c51      	adds	r1, r2, #1
 8000b50:	4421      	add	r1, r4
 8000b52:	7849      	ldrb	r1, [r1, #1]
 8000b54:	4422      	add	r2, r4
 8000b56:	7852      	ldrb	r2, [r2, #1]
 8000b58:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8000b5c:	4934      	ldr	r1, [pc, #208]	; (8000c30 <ModbusMasterControl+0x61c>)
 8000b5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
								index++;
 8000b62:	3501      	adds	r5, #1
 8000b64:	b2ed      	uxtb	r5, r5
							for(int i=0; i<dataLen; i++)
 8000b66:	3301      	adds	r3, #1
 8000b68:	e7ee      	b.n	8000b48 <ModbusMasterControl+0x534>
							uint8_t dataLen2 = modbus->rxMessage.rxData[2] / 2;
 8000b6a:	78e5      	ldrb	r5, [r4, #3]
 8000b6c:	086d      	lsrs	r5, r5, #1
							for(int i=0; i<dataLen2; i++)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4295      	cmp	r5, r2
 8000b72:	dddc      	ble.n	8000b2e <ModbusMasterControl+0x51a>
								degerler[i] = (modbus->rxMessage.rxData[index2 + i + 1])|(modbus->rxMessage.rxData[index2 + i] << 8);
 8000b74:	1899      	adds	r1, r3, r2
 8000b76:	1c48      	adds	r0, r1, #1
 8000b78:	4420      	add	r0, r4
 8000b7a:	7840      	ldrb	r0, [r0, #1]
 8000b7c:	4421      	add	r1, r4
 8000b7e:	7849      	ldrb	r1, [r1, #1]
 8000b80:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 8000b84:	482a      	ldr	r0, [pc, #168]	; (8000c30 <ModbusMasterControl+0x61c>)
 8000b86:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
								index2++;
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
							for(int i=0; i<dataLen2; i++)
 8000b8e:	3201      	adds	r2, #1
 8000b90:	e7ee      	b.n	8000b70 <ModbusMasterControl+0x55c>
							if(ModbusElementsEqual(modbus->txMessage.txData, modbus->rxMessage.rxData, modbus->txMessage.txIndex))
 8000b92:	f894 240f 	ldrb.w	r2, [r4, #1039]	; 0x40f
 8000b96:	4631      	mov	r1, r6
 8000b98:	f204 3013 	addw	r0, r4, #787	; 0x313
 8000b9c:	f7ff fd11 	bl	80005c2 <ModbusElementsEqual>
 8000ba0:	b118      	cbz	r0, 8000baa <ModbusMasterControl+0x596>
								sonuc=1;
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <ModbusMasterControl+0x618>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e7c1      	b.n	8000b2e <ModbusMasterControl+0x51a>
								sonuc=0;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <ModbusMasterControl+0x618>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e7bd      	b.n	8000b2e <ModbusMasterControl+0x51a>
							if(modbus->rxMessage.rxData[5] == modbus->txMessage.numOfRegisters)
 8000bb2:	79a2      	ldrb	r2, [r4, #6]
 8000bb4:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d003      	beq.n	8000bc4 <ModbusMasterControl+0x5b0>
								sonuc=0;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <ModbusMasterControl+0x618>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e7b4      	b.n	8000b2e <ModbusMasterControl+0x51a>
								sonuc=1;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <ModbusMasterControl+0x618>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e7b0      	b.n	8000b2e <ModbusMasterControl+0x51a>
							if(ModbusElementsEqual(modbus->txMessage.txData, modbus->rxMessage.rxData, modbus->txMessage.txIndex))
 8000bcc:	f894 240f 	ldrb.w	r2, [r4, #1039]	; 0x40f
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	f204 3013 	addw	r0, r4, #787	; 0x313
 8000bd6:	f7ff fcf4 	bl	80005c2 <ModbusElementsEqual>
 8000bda:	b118      	cbz	r0, 8000be4 <ModbusMasterControl+0x5d0>
								sonuc=1;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <ModbusMasterControl+0x618>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e7a4      	b.n	8000b2e <ModbusMasterControl+0x51a>
								sonuc=0;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <ModbusMasterControl+0x618>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e7a0      	b.n	8000b2e <ModbusMasterControl+0x51a>
							if(modbus->rxMessage.rxData[5] == modbus->txMessage.numOfRegisters)
 8000bec:	79a2      	ldrb	r2, [r4, #6]
 8000bee:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d003      	beq.n	8000bfe <ModbusMasterControl+0x5ea>
								sonuc=0;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <ModbusMasterControl+0x618>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	e797      	b.n	8000b2e <ModbusMasterControl+0x51a>
								sonuc=1;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <ModbusMasterControl+0x618>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e793      	b.n	8000b2e <ModbusMasterControl+0x51a>
			if(!errorTime.activated)
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <ModbusMasterControl+0x620>)
 8000c08:	7a1b      	ldrb	r3, [r3, #8]
 8000c0a:	b92b      	cbnz	r3, 8000c18 <ModbusMasterControl+0x604>
				TickTimerSetTime(&errorTime, 1000);
 8000c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <ModbusMasterControl+0x620>)
 8000c12:	f000 f863 	bl	8000cdc <TickTimerSetTime>
 8000c16:	e599      	b.n	800074c <ModbusMasterControl+0x138>
			else if(TickTimerCheckElapsedTime(&errorTime))
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <ModbusMasterControl+0x620>)
 8000c1a:	f000 f86d 	bl	8000cf8 <TickTimerCheckElapsedTime>
}
 8000c1e:	e595      	b.n	800074c <ModbusMasterControl+0x138>
 8000c20:	200004fc 	.word	0x200004fc
 8000c24:	200000dc 	.word	0x200000dc
 8000c28:	200000a0 	.word	0x200000a0
 8000c2c:	200000d8 	.word	0x200000d8
 8000c30:	20000078 	.word	0x20000078
 8000c34:	200000c0 	.word	0x200000c0

08000c38 <RingBufferInit>:
  * @param buffer pointer, buffer length
  * @retval None
  */
void RingBufferInit(RingBuffer_t *pRingBuffer, uint8_t *buffer, uint16_t length)
{
	pRingBuffer->writePoint = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6043      	str	r3, [r0, #4]
	pRingBuffer->readPoint	= 0;
 8000c3c:	6083      	str	r3, [r0, #8]
	pRingBuffer->length		= length;
 8000c3e:	8182      	strh	r2, [r0, #12]
	pRingBuffer->pBuffer	= buffer;
 8000c40:	6001      	str	r1, [r0, #0]
}
 8000c42:	4770      	bx	lr

08000c44 <RingBufferIsEmpty>:
  * @retval true or not
  */
bool RingBufferIsEmpty(RingBuffer_t *pRingBuffer)
{
	//if write point and read point are at the same array point, buffer is empty
	return (pRingBuffer->readPoint == pRingBuffer->writePoint) ? true : false;
 8000c44:	6882      	ldr	r2, [r0, #8]
 8000c46:	6840      	ldr	r0, [r0, #4]
}
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	bf14      	ite	ne
 8000c4c:	2000      	movne	r0, #0
 8000c4e:	2001      	moveq	r0, #1
 8000c50:	4770      	bx	lr

08000c52 <RingBufferIsFull>:
  * @retval true or not
  */
bool RingBufferIsFull(RingBuffer_t *pRingBuffer)
{
	// gap(write and read between) is calculating
	int nRead = pRingBuffer->writePoint - pRingBuffer->readPoint;
 8000c52:	6843      	ldr	r3, [r0, #4]
 8000c54:	6882      	ldr	r2, [r0, #8]
	//if notRead gap is negative, so it will be positive
	if (nRead < 0) nRead += pRingBuffer->length;
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	d406      	bmi.n	8000c68 <RingBufferIsFull+0x16>
	//if buffer is full, return true value
	return (nRead == (pRingBuffer->length - 1)) ? true : false;
 8000c5a:	8980      	ldrh	r0, [r0, #12]
 8000c5c:	3801      	subs	r0, #1
}
 8000c5e:	4298      	cmp	r0, r3
 8000c60:	bf14      	ite	ne
 8000c62:	2000      	movne	r0, #0
 8000c64:	2001      	moveq	r0, #1
 8000c66:	4770      	bx	lr
	if (nRead < 0) nRead += pRingBuffer->length;
 8000c68:	8982      	ldrh	r2, [r0, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	e7f5      	b.n	8000c5a <RingBufferIsFull+0x8>

08000c6e <RingBufferPushData>:
  * @brief RingBuffer Adding Data
  * @param buffer pointer, character
  * @retval true or not
  */
bool RingBufferPushData(RingBuffer_t *pRingBuffer, uint8_t character)
{
 8000c6e:	b538      	push	{r3, r4, r5, lr}
 8000c70:	4604      	mov	r4, r0
 8000c72:	460d      	mov	r5, r1
	bool retVal = false;
	//if buffer is full, out of the add function
	if(!RingBufferIsFull(pRingBuffer))
 8000c74:	f7ff ffed 	bl	8000c52 <RingBufferIsFull>
 8000c78:	b970      	cbnz	r0, 8000c98 <RingBufferPushData+0x2a>
	{
		//character will write for the last point
		pRingBuffer->pBuffer[pRingBuffer->writePoint] = character;
 8000c7a:	6822      	ldr	r2, [r4, #0]
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	54d5      	strb	r5, [r2, r3]
		//and write point will increasing
		pRingBuffer->writePoint++;
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	6063      	str	r3, [r4, #4]
		//if it is at the last point, turn to first point
		if(pRingBuffer->writePoint == pRingBuffer->length)
 8000c86:	89a2      	ldrh	r2, [r4, #12]
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d001      	beq.n	8000c90 <RingBufferPushData+0x22>
			pRingBuffer->writePoint=0;
		//adding process is completed
		retVal = true;
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	e004      	b.n	8000c9a <RingBufferPushData+0x2c>
			pRingBuffer->writePoint=0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	6063      	str	r3, [r4, #4]
		retVal = true;
 8000c94:	2001      	movs	r0, #1
 8000c96:	e000      	b.n	8000c9a <RingBufferPushData+0x2c>
	bool retVal = false;
 8000c98:	2000      	movs	r0, #0
	}

	return retVal;
}
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}

08000c9c <RingBufferPullData>:
  * @brief RingBuffer Pull Data
  * @param buffer pointer
  * @retval int data
  */
int RingBufferPullData(RingBuffer_t *pRingBuffer)
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	4604      	mov	r4, r0
	int character = -1;
	//if buffer is empty, out of the pull function
	if(!RingBufferIsEmpty(pRingBuffer))
 8000ca0:	f7ff ffd0 	bl	8000c44 <RingBufferIsEmpty>
 8000ca4:	b958      	cbnz	r0, 8000cbe <RingBufferPullData+0x22>
	{
		//character will read for the last point
		 character = pRingBuffer->pBuffer[pRingBuffer->readPoint];
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	68a3      	ldr	r3, [r4, #8]
 8000caa:	5cd0      	ldrb	r0, [r2, r3]
		//and read point will increasing
		pRingBuffer->readPoint++;
 8000cac:	3301      	adds	r3, #1
 8000cae:	60a3      	str	r3, [r4, #8]
		//if it is at the last point, turn to first point
		if(pRingBuffer->readPoint == pRingBuffer->length)
 8000cb0:	89a2      	ldrh	r2, [r4, #12]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d000      	beq.n	8000cb8 <RingBufferPullData+0x1c>
			pRingBuffer->readPoint=0;

	}

	return character;
}
 8000cb6:	bd10      	pop	{r4, pc}
			pRingBuffer->readPoint=0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60a3      	str	r3, [r4, #8]
 8000cbc:	e7fb      	b.n	8000cb6 <RingBufferPullData+0x1a>
	int character = -1;
 8000cbe:	f04f 30ff 	mov.w	r0, #4294967295
	return character;
 8000cc2:	e7f8      	b.n	8000cb6 <RingBufferPullData+0x1a>

08000cc4 <RingBufferClearData>:
  * @param buffer pointer
  * @retval void
  */
void RingBufferClearData(RingBuffer_t *pRingBuffer)
{
	pRingBuffer->writePoint = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6043      	str	r3, [r0, #4]
	pRingBuffer->readPoint 	= 0;
 8000cc8:	6083      	str	r3, [r0, #8]
}
 8000cca:	4770      	bx	lr

08000ccc <TickTimerInterrupt>:
  * @param void
  * @retval void
  */
void TickTimerInterrupt(void)
{
	msTick++;
 8000ccc:	4a02      	ldr	r2, [pc, #8]	; (8000cd8 <TickTimerInterrupt+0xc>)
 8000cce:	6813      	ldr	r3, [r2, #0]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200000e8 	.word	0x200000e8

08000cdc <TickTimerSetTime>:
  * @param time pointer, interval
  * @retval void
  */
void TickTimerSetTime(TickTime_t *time, uint32_t intervalMs)
{
	time->activated = true;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	7203      	strb	r3, [r0, #8]
	time->interval = intervalMs;
 8000ce0:	6041      	str	r1, [r0, #4]
	time->startTick = msTick;
 8000ce2:	4b02      	ldr	r3, [pc, #8]	; (8000cec <TickTimerSetTime+0x10>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6003      	str	r3, [r0, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200000e8 	.word	0x200000e8

08000cf0 <TickTimerStopTime>:
  * @param time pointer
  * @retval void
  */
void TickTimerStopTime(TickTime_t *time)
{
	time->activated = false;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	7203      	strb	r3, [r0, #8]
}
 8000cf4:	4770      	bx	lr
	...

08000cf8 <TickTimerCheckElapsedTime>:
  * @brief tick timer check time
  * @param time pointer
  * @retval void
  */
bool TickTimerCheckElapsedTime(TickTime_t *time)
{
 8000cf8:	4603      	mov	r3, r0
	uint32_t currentTick;
	if(time->activated)
 8000cfa:	7a00      	ldrb	r0, [r0, #8]
 8000cfc:	b198      	cbz	r0, 8000d26 <TickTimerCheckElapsedTime+0x2e>
	{
		currentTick = msTick;
 8000cfe:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <TickTimerCheckElapsedTime+0x38>)
 8000d00:	6812      	ldr	r2, [r2, #0]
		if(time->startTick <= currentTick)
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	4291      	cmp	r1, r2
 8000d06:	d808      	bhi.n	8000d1a <TickTimerCheckElapsedTime+0x22>
		{
			if(currentTick - time->startTick >= time->interval)
 8000d08:	1a52      	subs	r2, r2, r1
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	428a      	cmp	r2, r1
 8000d0e:	d201      	bcs.n	8000d14 <TickTimerCheckElapsedTime+0x1c>
				return true;
			}
		}
	}

	return false;
 8000d10:	2000      	movs	r0, #0
 8000d12:	4770      	bx	lr
				time->activated = false;
 8000d14:	2200      	movs	r2, #0
 8000d16:	721a      	strb	r2, [r3, #8]
				return true;
 8000d18:	4770      	bx	lr
			if((0xFFFFFFFF - (time->startTick - currentTick)) >= time->interval)
 8000d1a:	1a52      	subs	r2, r2, r1
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	6859      	ldr	r1, [r3, #4]
 8000d20:	428a      	cmp	r2, r1
 8000d22:	d201      	bcs.n	8000d28 <TickTimerCheckElapsedTime+0x30>
	return false;
 8000d24:	2000      	movs	r0, #0
}
 8000d26:	4770      	bx	lr
				time->activated = false;
 8000d28:	2200      	movs	r2, #0
 8000d2a:	721a      	strb	r2, [r3, #8]
				return true;
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200000e8 	.word	0x200000e8

08000d34 <UartX_Init>:
  * @retval void
  */
void UartX_Init(Uart_Comm_t *uart)
{
	//is usart defined as usart
	if(uart->huart == USART_EX)
 8000d34:	6802      	ldr	r2, [r0, #0]
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <UartX_Init+0x18>)
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d000      	beq.n	8000d3e <UartX_Init+0xa>
		//it is defining receiver  buffer
		usartReceiveBuff = uart->ringBufferReceive;
		//it is defining transmitter buffer
		usartTransmitBuff = uart->ringBufferTransmit;
	}
}
 8000d3c:	4770      	bx	lr
		usartReceiveBuff = uart->ringBufferReceive;
 8000d3e:	6842      	ldr	r2, [r0, #4]
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <UartX_Init+0x1c>)
 8000d42:	601a      	str	r2, [r3, #0]
		usartTransmitBuff = uart->ringBufferTransmit;
 8000d44:	6882      	ldr	r2, [r0, #8]
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <UartX_Init+0x20>)
 8000d48:	601a      	str	r2, [r3, #0]
}
 8000d4a:	e7f7      	b.n	8000d3c <UartX_Init+0x8>
 8000d4c:	20000d6c 	.word	0x20000d6c
 8000d50:	20000d1c 	.word	0x20000d1c
 8000d54:	20000d20 	.word	0x20000d20

08000d58 <UartX_WriteSingleChar>:
  * @brief external uart write char
  * @param uart pointer, character
  * @retval void
  */
void UartX_WriteSingleChar(Uart_Comm_t *uart, char character)
{
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	460d      	mov	r5, r1
	//it will write char at the transmitter buffer
	//but, firstly it is controlling. is transmitter buffer full
	if(RingBufferIsFull(uart->ringBufferTransmit))
 8000d5e:	6880      	ldr	r0, [r0, #8]
 8000d60:	f7ff ff77 	bl	8000c52 <RingBufferIsFull>
 8000d64:	b150      	cbz	r0, 8000d7c <UartX_WriteSingleChar+0x24>
	{
		//is there something transmitter interrupt process
		if(!(uart->huart->Instance->CR1 & UART_TX_INT))
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d70:	d009      	beq.n	8000d86 <UartX_WriteSingleChar+0x2e>
		{
			//it will be transmit a char from transmitter buffer
			HAL_UART_Transmit_IT(USART_EX, (uint8_t*)RingBufferPullData(uart->ringBufferTransmit), 1);
		}
		while(RingBufferIsFull(uart->ringBufferTransmit));
 8000d72:	68a0      	ldr	r0, [r4, #8]
 8000d74:	f7ff ff6d 	bl	8000c52 <RingBufferIsFull>
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d1fa      	bne.n	8000d72 <UartX_WriteSingleChar+0x1a>
	}
	//character will be added to transmit buffer
	RingBufferPushData(uart->ringBufferTransmit, character);
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	68a0      	ldr	r0, [r4, #8]
 8000d80:	f7ff ff75 	bl	8000c6e <RingBufferPushData>
}
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
			HAL_UART_Transmit_IT(USART_EX, (uint8_t*)RingBufferPullData(uart->ringBufferTransmit), 1);
 8000d86:	68a0      	ldr	r0, [r4, #8]
 8000d88:	f7ff ff88 	bl	8000c9c <RingBufferPullData>
 8000d8c:	4601      	mov	r1, r0
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4801      	ldr	r0, [pc, #4]	; (8000d98 <UartX_WriteSingleChar+0x40>)
 8000d92:	f001 fbee 	bl	8002572 <HAL_UART_Transmit_IT>
 8000d96:	e7ec      	b.n	8000d72 <UartX_WriteSingleChar+0x1a>
 8000d98:	20000d6c 	.word	0x20000d6c

08000d9c <UartX_WriteString>:
  * @brief external uart write string
  * @param uart pointer, string pointer
  * @retval void
  */
void UartX_WriteString(Uart_Comm_t *uart, char *str)
{
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	4605      	mov	r5, r0
 8000da0:	460c      	mov	r4, r1
	char *ptr;
	//str pointer characters will be defined to ptr pointer
	ptr = str;

	//until ptr is empty
	while(*ptr)
 8000da2:	e003      	b.n	8000dac <UartX_WriteString+0x10>
	{
		// will be sent one by one until ptr is empty
		UartX_WriteSingleChar(uart, *ptr);
 8000da4:	4628      	mov	r0, r5
 8000da6:	f7ff ffd7 	bl	8000d58 <UartX_WriteSingleChar>
		//ptr address will be increased
		ptr++;
 8000daa:	3401      	adds	r4, #1
	while(*ptr)
 8000dac:	7821      	ldrb	r1, [r4, #0]
 8000dae:	2900      	cmp	r1, #0
 8000db0:	d1f8      	bne.n	8000da4 <UartX_WriteString+0x8>
	}
}
 8000db2:	bd38      	pop	{r3, r4, r5, pc}

08000db4 <UartX_WriteIntControl>:
void UartX_WriteIntControl(Uart_Comm_t *uart)
{
	int check;

	//isn't transmitter interrupt active
	if(!(uart->huart->Instance->CR1 & UART_TX_INT))
 8000db4:	6803      	ldr	r3, [r0, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000dbe:	d000      	beq.n	8000dc2 <UartX_WriteIntControl+0xe>
 8000dc0:	4770      	bx	lr
{
 8000dc2:	b510      	push	{r4, lr}
 8000dc4:	4604      	mov	r4, r0
	{
		//will be controlled transmitter buffer
		check = RingBufferPullData(uart->ringBufferTransmit);
 8000dc6:	6880      	ldr	r0, [r0, #8]
 8000dc8:	f7ff ff68 	bl	8000c9c <RingBufferPullData>
		//is there data
		if(check > -1)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	db09      	blt.n	8000de4 <UartX_WriteIntControl+0x30>
		{
			//will be transmit data
			uart->huart->Instance->DR = (uint8_t)(check & 0xFF);
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	b2c0      	uxtb	r0, r0
 8000dd6:	6058      	str	r0, [r3, #4]
			//will be active transmitter interrupt
			__HAL_UART_ENABLE_IT(uart->huart, UART_IT_TXE);
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	68d3      	ldr	r3, [r2, #12]
 8000dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de2:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8000de4:	bd10      	pop	{r4, pc}
	...

08000de8 <UartX_CommInit>:
  * @brief external uart communication initialize
  * @param void
  * @retval void
  */
void UartX_CommInit(void)
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
	//init ring buffers
	RingBufferInit(&usartCommReceiveBuff, usartCommReceiveBuffer, BUFF_SIZE);
 8000dea:	4e0e      	ldr	r6, [pc, #56]	; (8000e24 <UartX_CommInit+0x3c>)
 8000dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df0:	490d      	ldr	r1, [pc, #52]	; (8000e28 <UartX_CommInit+0x40>)
 8000df2:	4630      	mov	r0, r6
 8000df4:	f7ff ff20 	bl	8000c38 <RingBufferInit>
	RingBufferInit(&usartCommTransmitBuff, usartCommTransmitBuffer, BUFF_SIZE);
 8000df8:	4d0c      	ldr	r5, [pc, #48]	; (8000e2c <UartX_CommInit+0x44>)
 8000dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfe:	490c      	ldr	r1, [pc, #48]	; (8000e30 <UartX_CommInit+0x48>)
 8000e00:	4628      	mov	r0, r5
 8000e02:	f7ff ff19 	bl	8000c38 <RingBufferInit>

	//define uart
	uartComm.huart = USART_EX;
 8000e06:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <UartX_CommInit+0x4c>)
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <UartX_CommInit+0x50>)
 8000e0a:	6023      	str	r3, [r4, #0]

	//start uart buffers
	uartComm.ringBufferReceive = &usartCommReceiveBuff;
 8000e0c:	6066      	str	r6, [r4, #4]
	uartComm.ringBufferTransmit = &usartCommTransmitBuff;
 8000e0e:	60a5      	str	r5, [r4, #8]

	//start uart
	UartX_Init(&uartComm);
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff ff8f 	bl	8000d34 <UartX_Init>

	//start uart receive interrupt
	__HAL_UART_ENABLE_IT(uartComm.huart, UART_IT_RXNE);
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68d3      	ldr	r3, [r2, #12]
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	60d3      	str	r3, [r2, #12]
}
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	200004fc 	.word	0x200004fc
 8000e28:	2000050c 	.word	0x2000050c
 8000e2c:	2000090c 	.word	0x2000090c
 8000e30:	2000091c 	.word	0x2000091c
 8000e34:	200004f0 	.word	0x200004f0
 8000e38:	20000d6c 	.word	0x20000d6c

08000e3c <UartX_Printf>:
  * @brief external uart print function
  * @param char
  * @retval int
  */
int UartX_Printf(const char *format, ...)
{
 8000e3c:	b40f      	push	{r0, r1, r2, r3}
 8000e3e:	b570      	push	{r4, r5, r6, lr}
 8000e40:	ab04      	add	r3, sp, #16
 8000e42:	f853 2b04 	ldr.w	r2, [r3], #4
	int status;

	va_start(arg, format);
 8000e46:	490b      	ldr	r1, [pc, #44]	; (8000e74 <UartX_Printf+0x38>)
 8000e48:	600b      	str	r3, [r1, #0]
	status = vsnprintf(printBuffer, BUFF_SIZE, format, arg);
 8000e4a:	4e0b      	ldr	r6, [pc, #44]	; (8000e78 <UartX_Printf+0x3c>)
 8000e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e50:	4630      	mov	r0, r6
 8000e52:	f001 fdab 	bl	80029ac <vsniprintf>
 8000e56:	4604      	mov	r4, r0
	va_end(arg);

	UartX_WriteString(&uartComm, printBuffer);
 8000e58:	4d08      	ldr	r5, [pc, #32]	; (8000e7c <UartX_Printf+0x40>)
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	f7ff ff9d 	bl	8000d9c <UartX_WriteString>
	UartX_WriteIntControl(&uartComm);
 8000e62:	4628      	mov	r0, r5
 8000e64:	f7ff ffa6 	bl	8000db4 <UartX_WriteIntControl>
	return status;
}
 8000e68:	4620      	mov	r0, r4
 8000e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000e6e:	b004      	add	sp, #16
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200000ec 	.word	0x200000ec
 8000e78:	200000f0 	.word	0x200000f0
 8000e7c:	200004f0 	.word	0x200004f0

08000e80 <UartX_InterruptCallBacks>:
  * @brief external uart callback function
  * @param void
  * @retval void
  */
void UartX_InterruptCallBacks(void)
{
 8000e80:	b538      	push	{r3, r4, r5, lr}
	char character;
	int check;

	// has data arrived?
	if(__HAL_UART_GET_FLAG(USART_EX, UART_FLAG_RXNE))
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <UartX_InterruptCallBacks+0x88>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f013 0f20 	tst.w	r3, #32
 8000e8c:	d106      	bne.n	8000e9c <UartX_InterruptCallBacks+0x1c>
		//clear receiver interrupt flag
		__HAL_UART_CLEAR_FLAG(USART_EX, UART_FLAG_RXNE);
	}

	//has data transmit
	if(__HAL_UART_GET_FLAG(USART_EX, UART_FLAG_TXE))
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <UartX_InterruptCallBacks+0x88>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e98:	d11a      	bne.n	8000ed0 <UartX_InterruptCallBacks+0x50>
			//disabling transmit interrupt flag
			__HAL_UART_DISABLE_IT(USART_EX, UART_IT_TXE);
		}

	}
}
 8000e9a:	bd38      	pop	{r3, r4, r5, pc}
		character = (uint8_t)(uartComm.huart->Instance->DR & (uint8_t)UART_DATA_7_BIT);
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <UartX_InterruptCallBacks+0x8c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685c      	ldr	r4, [r3, #4]
 8000ea4:	b2e4      	uxtb	r4, r4
		if(RingBufferPushData(usartReceiveBuff, character) == false)
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <UartX_InterruptCallBacks+0x90>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	f7ff fedf 	bl	8000c6e <RingBufferPushData>
 8000eb0:	b128      	cbz	r0, 8000ebe <UartX_InterruptCallBacks+0x3e>
		__HAL_UART_CLEAR_FLAG(USART_EX, UART_FLAG_RXNE);
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <UartX_InterruptCallBacks+0x88>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f06f 0220 	mvn.w	r2, #32
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e7e7      	b.n	8000e8e <UartX_InterruptCallBacks+0xe>
			RingBufferPullData(usartReceiveBuff);
 8000ebe:	4d14      	ldr	r5, [pc, #80]	; (8000f10 <UartX_InterruptCallBacks+0x90>)
 8000ec0:	6828      	ldr	r0, [r5, #0]
 8000ec2:	f7ff feeb 	bl	8000c9c <RingBufferPullData>
			RingBufferPushData(usartReceiveBuff, character);
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	6828      	ldr	r0, [r5, #0]
 8000eca:	f7ff fed0 	bl	8000c6e <RingBufferPushData>
 8000ece:	e7f0      	b.n	8000eb2 <UartX_InterruptCallBacks+0x32>
		check = RingBufferPullData(usartTransmitBuff);
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <UartX_InterruptCallBacks+0x94>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	f7ff fee2 	bl	8000c9c <RingBufferPullData>
		if(check > -1)
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	db03      	blt.n	8000ee4 <UartX_InterruptCallBacks+0x64>
			uartComm.huart->Instance->DR = check;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <UartX_InterruptCallBacks+0x8c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6058      	str	r0, [r3, #4]
		if(RingBufferIsEmpty(usartTransmitBuff))
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <UartX_InterruptCallBacks+0x94>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	f7ff feac 	bl	8000c44 <RingBufferIsEmpty>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d0d4      	beq.n	8000e9a <UartX_InterruptCallBacks+0x1a>
			__HAL_UART_CLEAR_FLAG(USART_EX, UART_FLAG_TC);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <UartX_InterruptCallBacks+0x88>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8000ef8:	6011      	str	r1, [r2, #0]
			__HAL_UART_DISABLE_IT(USART_EX, UART_IT_TXE);
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68d3      	ldr	r3, [r2, #12]
 8000efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	e7c9      	b.n	8000e9a <UartX_InterruptCallBacks+0x1a>
 8000f06:	bf00      	nop
 8000f08:	20000d6c 	.word	0x20000d6c
 8000f0c:	200004f0 	.word	0x200004f0
 8000f10:	20000d1c 	.word	0x20000d1c
 8000f14:	20000d20 	.word	0x20000d20

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	9403      	str	r4, [sp, #12]
 8000f20:	9404      	str	r4, [sp, #16]
 8000f22:	9405      	str	r4, [sp, #20]
 8000f24:	9406      	str	r4, [sp, #24]
 8000f26:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f28:	9400      	str	r4, [sp, #0]
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_GPIO_Init+0x84>)
 8000f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
 8000f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f36:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	9401      	str	r4, [sp, #4]
 8000f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
 8000f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f4a:	f002 0201 	and.w	r2, r2, #1
 8000f4e:	9201      	str	r2, [sp, #4]
 8000f50:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	9402      	str	r4, [sp, #8]
 8000f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f56:	f042 0208 	orr.w	r2, r2, #8
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f66:	4d0e      	ldr	r5, [pc, #56]	; (8000fa0 <MX_GPIO_Init+0x88>)
 8000f68:	4622      	mov	r2, r4
 8000f6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f000 fc09 	bl	8001786 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f74:	2601      	movs	r6, #1
 8000f76:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	a903      	add	r1, sp, #12
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_GPIO_Init+0x8c>)
 8000f80:	f000 fb04 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f84:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f88:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	a903      	add	r1, sp, #12
 8000f92:	4628      	mov	r0, r5
 8000f94:	f000 fafa 	bl	800158c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f98:	b008      	add	sp, #32
 8000f9a:	bd70      	pop	{r4, r5, r6, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000faa:	e7fe      	b.n	8000faa <Error_Handler+0x2>

08000fac <MX_TIM2_Init>:
{
 8000fac:	b500      	push	{lr}
 8000fae:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	9303      	str	r3, [sp, #12]
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_TIM2_Init+0x64>)
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 83;
 8000fc6:	2253      	movs	r2, #83	; 0x53
 8000fc8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 8000fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd6:	f001 f8b7 	bl	8002148 <HAL_TIM_Base_Init>
 8000fda:	b990      	cbnz	r0, 8001002 <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe2:	a902      	add	r1, sp, #8
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <MX_TIM2_Init+0x64>)
 8000fe6:	f001 f8e8 	bl	80021ba <HAL_TIM_ConfigClockSource>
 8000fea:	b960      	cbnz	r0, 8001006 <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff2:	4669      	mov	r1, sp
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM2_Init+0x64>)
 8000ff6:	f001 f95f 	bl	80022b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	b930      	cbnz	r0, 800100a <MX_TIM2_Init+0x5e>
}
 8000ffc:	b007      	add	sp, #28
 8000ffe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001002:	f7ff ffd1 	bl	8000fa8 <Error_Handler>
    Error_Handler();
 8001006:	f7ff ffcf 	bl	8000fa8 <Error_Handler>
    Error_Handler();
 800100a:	f7ff ffcd 	bl	8000fa8 <Error_Handler>
 800100e:	bf00      	nop
 8001010:	20000d24 	.word	0x20000d24

08001014 <MX_USART2_UART_Init>:
{
 8001014:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <MX_USART2_UART_Init+0x2c>)
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MX_USART2_UART_Init+0x30>)
 800101a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 800101c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001020:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	2300      	movs	r3, #0
 8001024:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001026:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001028:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800102a:	220c      	movs	r2, #12
 800102c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001032:	f001 fa6f 	bl	8002514 <HAL_UART_Init>
 8001036:	b900      	cbnz	r0, 800103a <MX_USART2_UART_Init+0x26>
}
 8001038:	bd08      	pop	{r3, pc}
    Error_Handler();
 800103a:	f7ff ffb5 	bl	8000fa8 <Error_Handler>
 800103e:	bf00      	nop
 8001040:	20000d6c 	.word	0x20000d6c
 8001044:	40004400 	.word	0x40004400

08001048 <SystemClock_Config>:
{
 8001048:	b500      	push	{lr}
 800104a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104c:	2230      	movs	r2, #48	; 0x30
 800104e:	2100      	movs	r1, #0
 8001050:	a808      	add	r0, sp, #32
 8001052:	f001 fcb9 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001056:	2300      	movs	r3, #0
 8001058:	9303      	str	r3, [sp, #12]
 800105a:	9304      	str	r3, [sp, #16]
 800105c:	9305      	str	r3, [sp, #20]
 800105e:	9306      	str	r3, [sp, #24]
 8001060:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <SystemClock_Config+0xa0>)
 8001066:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001068:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800106c:	6411      	str	r1, [r2, #64]	; 0x40
 800106e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001070:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <SystemClock_Config+0xa4>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108e:	2301      	movs	r3, #1
 8001090:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001096:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2202      	movs	r2, #2
 800109a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a2:	2304      	movs	r3, #4
 80010a4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a6:	21a8      	movs	r1, #168	; 0xa8
 80010a8:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010aa:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ac:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	a808      	add	r0, sp, #32
 80010b0:	f000 fb70 	bl	8001794 <HAL_RCC_OscConfig>
 80010b4:	b998      	cbnz	r0, 80010de <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b6:	230f      	movs	r3, #15
 80010b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ba:	2302      	movs	r3, #2
 80010bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ce:	2105      	movs	r1, #5
 80010d0:	a803      	add	r0, sp, #12
 80010d2:	f000 fdc9 	bl	8001c68 <HAL_RCC_ClockConfig>
 80010d6:	b920      	cbnz	r0, 80010e2 <SystemClock_Config+0x9a>
}
 80010d8:	b015      	add	sp, #84	; 0x54
 80010da:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010de:	f7ff ff63 	bl	8000fa8 <Error_Handler>
    Error_Handler();
 80010e2:	f7ff ff61 	bl	8000fa8 <Error_Handler>
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <main>:
{
 80010f0:	b508      	push	{r3, lr}
  HAL_Init();
 80010f2:	f000 f941 	bl	8001378 <HAL_Init>
  SystemClock_Config();
 80010f6:	f7ff ffa7 	bl	8001048 <SystemClock_Config>
  MX_GPIO_Init();
 80010fa:	f7ff ff0d 	bl	8000f18 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010fe:	f7ff ff55 	bl	8000fac <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001102:	f7ff ff87 	bl	8001014 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <main+0x4c>)
 8001108:	f000 feb4 	bl	8001e74 <HAL_TIM_Base_Start_IT>
  UartX_CommInit();
 800110c:	f7ff fe6c 	bl	8000de8 <UartX_CommInit>
  ModbusInit(&modbus);
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <main+0x50>)
 8001112:	f7ff fa47 	bl	80005a4 <ModbusInit>
  UartX_Printf("modbus ilk haberlesme\n");
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <main+0x54>)
 8001118:	f7ff fe90 	bl	8000e3c <UartX_Printf>
 800111c:	e006      	b.n	800112c <main+0x3c>
		  HAL_Delay(500);
 800111e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001122:	f000 f955 	bl	80013d0 <HAL_Delay>
	  ModbusMasterControl(&modbus);
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <main+0x50>)
 8001128:	f7ff fa74 	bl	8000614 <ModbusMasterControl>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800112c:	2101      	movs	r1, #1
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <main+0x58>)
 8001130:	f000 fb22 	bl	8001778 <HAL_GPIO_ReadPin>
 8001134:	2800      	cmp	r0, #0
 8001136:	d1f2      	bne.n	800111e <main+0x2e>
 8001138:	e7f5      	b.n	8001126 <main+0x36>
 800113a:	bf00      	nop
 800113c:	20000d24 	.word	0x20000d24
 8001140:	20000db0 	.word	0x20000db0
 8001144:	080034e8 	.word	0x080034e8
 8001148:	40020000 	.word	0x40020000

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2100      	movs	r1, #0
 8001150:	9100      	str	r1, [sp, #0]
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_MspInit+0x34>)
 8001154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
 800115c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800115e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	9101      	str	r1, [sp, #4]
 8001168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	b002      	add	sp, #8
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001184:	6803      	ldr	r3, [r0, #0]
 8001186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118a:	d000      	beq.n	800118e <HAL_TIM_Base_MspInit+0xa>
 800118c:	4770      	bx	lr
{
 800118e:	b500      	push	{lr}
 8001190:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001192:	2100      	movs	r1, #0
 8001194:	9101      	str	r1, [sp, #4]
 8001196:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800119a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ac:	460a      	mov	r2, r1
 80011ae:	201c      	movs	r0, #28
 80011b0:	f000 f934 	bl	800141c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b4:	201c      	movs	r0, #28
 80011b6:	f000 f969 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011ba:	b003      	add	sp, #12
 80011bc:	f85d fb04 	ldr.w	pc, [sp], #4

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	2300      	movs	r3, #0
 80011c6:	9303      	str	r3, [sp, #12]
 80011c8:	9304      	str	r3, [sp, #16]
 80011ca:	9305      	str	r3, [sp, #20]
 80011cc:	9306      	str	r3, [sp, #24]
 80011ce:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80011d0:	6802      	ldr	r2, [r0, #0]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_UART_MspInit+0x74>)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011d8:	b008      	add	sp, #32
 80011da:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80011dc:	2400      	movs	r4, #0
 80011de:	9401      	str	r4, [sp, #4]
 80011e0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80011e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
 80011ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ee:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80011f2:	9201      	str	r2, [sp, #4]
 80011f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	9402      	str	r4, [sp, #8]
 80011f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800120a:	230c      	movs	r3, #12
 800120c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	a903      	add	r1, sp, #12
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <HAL_UART_MspInit+0x78>)
 800121e:	f000 f9b5 	bl	800158c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001222:	4622      	mov	r2, r4
 8001224:	4621      	mov	r1, r4
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f000 f8f8 	bl	800141c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122c:	2026      	movs	r0, #38	; 0x26
 800122e:	f000 f92d 	bl	800148c <HAL_NVIC_EnableIRQ>
}
 8001232:	e7d1      	b.n	80011d8 <HAL_UART_MspInit+0x18>
 8001234:	40004400 	.word	0x40004400
 8001238:	40020000 	.word	0x40020000

0800123c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler>

0800123e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler>

08001240 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler>

08001242 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler>

08001244 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler>

08001246 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f8ad 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bd08      	pop	{r3, pc}

08001254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001254:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

	TickTimerInterrupt();
 8001256:	f7ff fd39 	bl	8000ccc <TickTimerInterrupt>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800125a:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM2_IRQHandler+0x10>)
 800125c:	f000 fe53 	bl	8001f06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001260:	bd08      	pop	{r3, pc}
 8001262:	bf00      	nop
 8001264:	20000d24 	.word	0x20000d24

08001268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001268:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	UartX_InterruptCallBacks();
 800126a:	f7ff fe09 	bl	8000e80 <UartX_InterruptCallBacks>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800126e:	4802      	ldr	r0, [pc, #8]	; (8001278 <USART2_IRQHandler+0x10>)
 8001270:	f001 fa30 	bl	80026d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001274:	bd08      	pop	{r3, pc}
 8001276:	bf00      	nop
 8001278:	20000d6c 	.word	0x20000d6c

0800127c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800127c:	b510      	push	{r4, lr}
 800127e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <_sbrk+0x38>)
 8001282:	490d      	ldr	r1, [pc, #52]	; (80012b8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <_sbrk+0x40>)
 8001286:	6800      	ldr	r0, [r0, #0]
 8001288:	b140      	cbz	r0, 800129c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <_sbrk+0x40>)
 800128c:	6800      	ldr	r0, [r0, #0]
 800128e:	4403      	add	r3, r0
 8001290:	1a52      	subs	r2, r2, r1
 8001292:	4293      	cmp	r3, r2
 8001294:	d806      	bhi.n	80012a4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <_sbrk+0x40>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800129a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <_sbrk+0x40>)
 800129e:	4c08      	ldr	r4, [pc, #32]	; (80012c0 <_sbrk+0x44>)
 80012a0:	6004      	str	r4, [r0, #0]
 80012a2:	e7f2      	b.n	800128a <_sbrk+0xe>
    errno = ENOMEM;
 80012a4:	f001 fb98 	bl	80029d8 <__errno>
 80012a8:	230c      	movs	r3, #12
 80012aa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	e7f3      	b.n	800129a <_sbrk+0x1e>
 80012b2:	bf00      	nop
 80012b4:	20020000 	.word	0x20020000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	200011c8 	.word	0x200011c8
 80012c0:	20001318 	.word	0x20001318

080012c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <SystemInit+0x10>)
 80012c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80012ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001302:	f7ff ffdf 	bl	80012c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f001 fb6d 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fef1 	bl	80010f0 <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800131c:	0800355c 	.word	0x0800355c
  ldr r2, =_sbss
 8001320:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001324:	20001318 	.word	0x20001318

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>
	...

0800132c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_InitTick+0x40>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	fbb3 f3f2 	udiv	r3, r3, r2
 800133c:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_InitTick+0x44>)
 800133e:	6810      	ldr	r0, [r2, #0]
 8001340:	fbb0 f0f3 	udiv	r0, r0, r3
 8001344:	f000 f8b0 	bl	80014a8 <HAL_SYSTICK_Config>
 8001348:	b968      	cbnz	r0, 8001366 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	2c0f      	cmp	r4, #15
 800134c:	d901      	bls.n	8001352 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
 8001350:	e00a      	b.n	8001368 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001352:	2200      	movs	r2, #0
 8001354:	4621      	mov	r1, r4
 8001356:	f04f 30ff 	mov.w	r0, #4294967295
 800135a:	f000 f85f 	bl	800141c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_InitTick+0x48>)
 8001360:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2000      	movs	r0, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001366:	2001      	movs	r0, #1
}
 8001368:	bd10      	pop	{r4, pc}
 800136a:	bf00      	nop
 800136c:	20000004 	.word	0x20000004
 8001370:	20000000 	.word	0x20000000
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_Init>:
{
 8001378:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x30>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001382:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800138a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001392:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f82f 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff ffc6 	bl	800132c <HAL_InitTick>
  HAL_MspInit();
 80013a0:	f7ff fed4 	bl	800114c <HAL_MspInit>
}
 80013a4:	2000      	movs	r0, #0
 80013a6:	bd08      	pop	{r3, pc}
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x10>)
 80013ae:	6811      	ldr	r1, [r2, #0]
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_IncTick+0x14>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	440b      	add	r3, r1
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200011cc 	.word	0x200011cc
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_GetTick+0x8>)
 80013c6:	6818      	ldr	r0, [r3, #0]
}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200011cc 	.word	0x200011cc

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff6 	bl	80013c4 <HAL_GetTick>
 80013d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	f1b4 3fff 	cmp.w	r4, #4294967295
 80013de:	d002      	beq.n	80013e6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_Delay+0x24>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	f7ff ffed 	bl	80013c4 <HAL_GetTick>
 80013ea:	1b40      	subs	r0, r0, r5
 80013ec:	42a0      	cmp	r0, r4
 80013ee:	d3fa      	bcc.n	80013e6 <HAL_Delay+0x16>
  {
  }
}
 80013f0:	bd38      	pop	{r3, r4, r5, pc}
 80013f2:	bf00      	nop
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	0200      	lsls	r0, r0, #8
 8001406:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001414:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_NVIC_SetPriority+0x68>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001426:	f1c3 0c07 	rsb	ip, r3, #7
 800142a:	f1bc 0f04 	cmp.w	ip, #4
 800142e:	bf28      	it	cs
 8001430:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001434:	f103 0e04 	add.w	lr, r3, #4
 8001438:	f1be 0f06 	cmp.w	lr, #6
 800143c:	d918      	bls.n	8001470 <HAL_NVIC_SetPriority+0x54>
 800143e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 3eff 	mov.w	lr, #4294967295
 8001444:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001448:	ea21 010c 	bic.w	r1, r1, ip
 800144c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001452:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001456:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8001458:	2800      	cmp	r0, #0
 800145a:	db0b      	blt.n	8001474 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001464:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001468:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800146c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001470:	2300      	movs	r3, #0
 8001472:	e7e5      	b.n	8001440 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	f000 000f 	and.w	r0, r0, #15
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <HAL_NVIC_SetPriority+0x6c>)
 800147e:	541a      	strb	r2, [r3, r0]
 8001480:	e7f4      	b.n	800146c <HAL_NVIC_SetPriority+0x50>
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00
 8001488:	e000ed14 	.word	0xe000ed14

0800148c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800148c:	2800      	cmp	r0, #0
 800148e:	db07      	blt.n	80014a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001490:	f000 021f 	and.w	r2, r0, #31
 8001494:	0940      	lsrs	r0, r0, #5
 8001496:	2301      	movs	r3, #1
 8001498:	4093      	lsls	r3, r2
 800149a:	4a02      	ldr	r2, [pc, #8]	; (80014a4 <HAL_NVIC_EnableIRQ+0x18>)
 800149c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	3801      	subs	r0, #1
 80014aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014ae:	d20b      	bcs.n	80014c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80014b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_SYSTICK_Config+0x24>)
 80014b8:	21f0      	movs	r1, #240	; 0xf0
 80014ba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014be:	2000      	movs	r0, #0
 80014c0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	2207      	movs	r2, #7
 80014c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80014d6:	f7ff ff75 	bl	80013c4 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014da:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d006      	beq.n	80014f2 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	2300      	movs	r3, #0
 80014ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
 80014f2:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f023 0316 	bic.w	r3, r3, #22
 80014fc:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	6953      	ldr	r3, [r2, #20]
 8001502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001506:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150a:	b1e3      	cbz	r3, 8001546 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	f023 0308 	bic.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001516:	6822      	ldr	r2, [r4, #0]
 8001518:	6813      	ldr	r3, [r2, #0]
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f013 0f01 	tst.w	r3, #1
 8001528:	d011      	beq.n	800154e <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152a:	f7ff ff4b 	bl	80013c4 <HAL_GetTick>
 800152e:	1b43      	subs	r3, r0, r5
 8001530:	2b05      	cmp	r3, #5
 8001532:	d9f5      	bls.n	8001520 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001534:	2320      	movs	r3, #32
 8001536:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001538:	2003      	movs	r0, #3
 800153a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800153e:	2300      	movs	r3, #0
 8001540:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001544:	e7d4      	b.n	80014f0 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001546:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1df      	bne.n	800150c <HAL_DMA_Abort+0x3c>
 800154c:	e7e3      	b.n	8001516 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001550:	233f      	movs	r3, #63	; 0x3f
 8001552:	4093      	lsls	r3, r2
 8001554:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001556:	2301      	movs	r3, #1
 8001558:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800155c:	2000      	movs	r0, #0
 800155e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8001562:	e7c5      	b.n	80014f0 <HAL_DMA_Abort+0x20>

08001564 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001564:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d003      	beq.n	8001576 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
 8001574:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001576:	2305      	movs	r3, #5
 8001578:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001586:	2000      	movs	r0, #0
}
 8001588:	4770      	bx	lr
	...

0800158c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158c:	2300      	movs	r3, #0
 800158e:	2b0f      	cmp	r3, #15
 8001590:	f200 80e9 	bhi.w	8001766 <HAL_GPIO_Init+0x1da>
{
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	e065      	b.n	8001666 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800159c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80015a0:	2403      	movs	r4, #3
 80015a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80015a6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015aa:	68cc      	ldr	r4, [r1, #12]
 80015ac:	fa04 f40e 	lsl.w	r4, r4, lr
 80015b0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80015b2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ba:	684a      	ldr	r2, [r1, #4]
 80015bc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80015c4:	6042      	str	r2, [r0, #4]
 80015c6:	e05c      	b.n	8001682 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c8:	08dc      	lsrs	r4, r3, #3
 80015ca:	3408      	adds	r4, #8
 80015cc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d0:	f003 0507 	and.w	r5, r3, #7
 80015d4:	00ad      	lsls	r5, r5, #2
 80015d6:	f04f 0e0f 	mov.w	lr, #15
 80015da:	fa0e fe05 	lsl.w	lr, lr, r5
 80015de:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e2:	690a      	ldr	r2, [r1, #16]
 80015e4:	40aa      	lsls	r2, r5
 80015e6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80015ee:	e05c      	b.n	80016aa <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f0:	2207      	movs	r2, #7
 80015f2:	e000      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 80015f4:	2200      	movs	r2, #0
 80015f6:	fa02 f20e 	lsl.w	r2, r2, lr
 80015fa:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fc:	3402      	adds	r4, #2
 80015fe:	4d5a      	ldr	r5, [pc, #360]	; (8001768 <HAL_GPIO_Init+0x1dc>)
 8001600:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001604:	4a59      	ldr	r2, [pc, #356]	; (800176c <HAL_GPIO_Init+0x1e0>)
 8001606:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001608:	ea6f 020c 	mvn.w	r2, ip
 800160c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001610:	684e      	ldr	r6, [r1, #4]
 8001612:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001616:	d001      	beq.n	800161c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001618:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800161c:	4c53      	ldr	r4, [pc, #332]	; (800176c <HAL_GPIO_Init+0x1e0>)
 800161e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001620:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001622:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001626:	684e      	ldr	r6, [r1, #4]
 8001628:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800162c:	d001      	beq.n	8001632 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 800162e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001632:	4c4e      	ldr	r4, [pc, #312]	; (800176c <HAL_GPIO_Init+0x1e0>)
 8001634:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001636:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001638:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163c:	684e      	ldr	r6, [r1, #4]
 800163e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001642:	d001      	beq.n	8001648 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001644:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001648:	4c48      	ldr	r4, [pc, #288]	; (800176c <HAL_GPIO_Init+0x1e0>)
 800164a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800164e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001650:	684d      	ldr	r5, [r1, #4]
 8001652:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001656:	d001      	beq.n	800165c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001658:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 800165c:	4c43      	ldr	r4, [pc, #268]	; (800176c <HAL_GPIO_Init+0x1e0>)
 800165e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001660:	3301      	adds	r3, #1
 8001662:	2b0f      	cmp	r3, #15
 8001664:	d87d      	bhi.n	8001762 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001666:	2201      	movs	r2, #1
 8001668:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	680c      	ldr	r4, [r1, #0]
 800166c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001670:	ea32 0404 	bics.w	r4, r2, r4
 8001674:	d1f4      	bne.n	8001660 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	684c      	ldr	r4, [r1, #4]
 8001678:	f004 0403 	and.w	r4, r4, #3
 800167c:	3c01      	subs	r4, #1
 800167e:	2c01      	cmp	r4, #1
 8001680:	d98b      	bls.n	800159a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001682:	684a      	ldr	r2, [r1, #4]
 8001684:	f002 0203 	and.w	r2, r2, #3
 8001688:	2a03      	cmp	r2, #3
 800168a:	d009      	beq.n	80016a0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800168c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168e:	005d      	lsls	r5, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	40aa      	lsls	r2, r5
 8001694:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001698:	688a      	ldr	r2, [r1, #8]
 800169a:	40aa      	lsls	r2, r5
 800169c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800169e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a0:	684a      	ldr	r2, [r1, #4]
 80016a2:	f002 0203 	and.w	r2, r2, #3
 80016a6:	2a02      	cmp	r2, #2
 80016a8:	d08e      	beq.n	80015c8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80016aa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ac:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f20e 	lsl.w	r2, r2, lr
 80016b6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ba:	684a      	ldr	r2, [r1, #4]
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	fa02 f20e 	lsl.w	r2, r2, lr
 80016c4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80016c6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c8:	684a      	ldr	r2, [r1, #4]
 80016ca:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80016ce:	d0c7      	beq.n	8001660 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d0:	2200      	movs	r2, #0
 80016d2:	9201      	str	r2, [sp, #4]
 80016d4:	4a26      	ldr	r2, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x1e4>)
 80016d6:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80016d8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80016dc:	6454      	str	r4, [r2, #68]	; 0x44
 80016de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016e0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016e4:	9201      	str	r2, [sp, #4]
 80016e6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80016e8:	089c      	lsrs	r4, r3, #2
 80016ea:	1ca5      	adds	r5, r4, #2
 80016ec:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_GPIO_Init+0x1dc>)
 80016ee:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f2:	f003 0e03 	and.w	lr, r3, #3
 80016f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f20e 	lsl.w	r2, r2, lr
 8001700:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_GPIO_Init+0x1e8>)
 8001706:	4290      	cmp	r0, r2
 8001708:	f43f af74 	beq.w	80015f4 <HAL_GPIO_Init+0x68>
 800170c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001710:	4290      	cmp	r0, r2
 8001712:	d01a      	beq.n	800174a <HAL_GPIO_Init+0x1be>
 8001714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001718:	4290      	cmp	r0, r2
 800171a:	d018      	beq.n	800174e <HAL_GPIO_Init+0x1c2>
 800171c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001720:	4290      	cmp	r0, r2
 8001722:	d016      	beq.n	8001752 <HAL_GPIO_Init+0x1c6>
 8001724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001728:	4290      	cmp	r0, r2
 800172a:	d014      	beq.n	8001756 <HAL_GPIO_Init+0x1ca>
 800172c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001730:	4290      	cmp	r0, r2
 8001732:	d012      	beq.n	800175a <HAL_GPIO_Init+0x1ce>
 8001734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001738:	4290      	cmp	r0, r2
 800173a:	d010      	beq.n	800175e <HAL_GPIO_Init+0x1d2>
 800173c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001740:	4290      	cmp	r0, r2
 8001742:	f43f af55 	beq.w	80015f0 <HAL_GPIO_Init+0x64>
 8001746:	2208      	movs	r2, #8
 8001748:	e755      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 800174a:	2201      	movs	r2, #1
 800174c:	e753      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 800174e:	2202      	movs	r2, #2
 8001750:	e751      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 8001752:	2203      	movs	r2, #3
 8001754:	e74f      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 8001756:	2204      	movs	r2, #4
 8001758:	e74d      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 800175a:	2205      	movs	r2, #5
 800175c:	e74b      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
 800175e:	2206      	movs	r2, #6
 8001760:	e749      	b.n	80015f6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001762:	b002      	add	sp, #8
 8001764:	bd70      	pop	{r4, r5, r6, pc}
 8001766:	4770      	bx	lr
 8001768:	40013800 	.word	0x40013800
 800176c:	40013c00 	.word	0x40013c00
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001778:	6903      	ldr	r3, [r0, #16]
 800177a:	4219      	tst	r1, r3
 800177c:	d001      	beq.n	8001782 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800177e:	2001      	movs	r0, #1
 8001780:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001782:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001784:	4770      	bx	lr

08001786 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001786:	b10a      	cbz	r2, 800178c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001788:	6181      	str	r1, [r0, #24]
 800178a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178c:	0409      	lsls	r1, r1, #16
 800178e:	6181      	str	r1, [r0, #24]
  }
}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	2800      	cmp	r0, #0
 8001796:	f000 81e0 	beq.w	8001b5a <HAL_RCC_OscConfig+0x3c6>
{
 800179a:	b570      	push	{r4, r5, r6, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	f013 0f01 	tst.w	r3, #1
 80017a6:	d03b      	beq.n	8001820 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a8:	4b9f      	ldr	r3, [pc, #636]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d02c      	beq.n	800180e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b4:	4b9c      	ldr	r3, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d021      	beq.n	8001804 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c0:	6863      	ldr	r3, [r4, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d04f      	beq.n	8001868 <HAL_RCC_OscConfig+0xd4>
 80017c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017cc:	d052      	beq.n	8001874 <HAL_RCC_OscConfig+0xe0>
 80017ce:	4b96      	ldr	r3, [pc, #600]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d050      	beq.n	8001888 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff fded 	bl	80013c4 <HAL_GetTick>
 80017ea:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ec:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017f4:	d114      	bne.n	8001820 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f6:	f7ff fde5 	bl	80013c4 <HAL_GetTick>
 80017fa:	1b40      	subs	r0, r0, r5
 80017fc:	2864      	cmp	r0, #100	; 0x64
 80017fe:	d9f5      	bls.n	80017ec <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001800:	2003      	movs	r0, #3
 8001802:	e1b1      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001804:	4b88      	ldr	r3, [pc, #544]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800180c:	d0d8      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180e:	4b86      	ldr	r3, [pc, #536]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001816:	d003      	beq.n	8001820 <HAL_RCC_OscConfig+0x8c>
 8001818:	6863      	ldr	r3, [r4, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 819f 	beq.w	8001b5e <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	f013 0f02 	tst.w	r3, #2
 8001826:	d054      	beq.n	80018d2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001828:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f013 0f0c 	tst.w	r3, #12
 8001830:	d03e      	beq.n	80018b0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b7d      	ldr	r3, [pc, #500]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183a:	2b08      	cmp	r3, #8
 800183c:	d033      	beq.n	80018a6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800183e:	68e3      	ldr	r3, [r4, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d068      	beq.n	8001916 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fdbb 	bl	80013c4 <HAL_GetTick>
 800184e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f013 0f02 	tst.w	r3, #2
 8001858:	d154      	bne.n	8001904 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fdb3 	bl	80013c4 <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	2802      	cmp	r0, #2
 8001862:	d9f5      	bls.n	8001850 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
 8001866:	e17f      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	4a6f      	ldr	r2, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e7b5      	b.n	80017e0 <HAL_RCC_OscConfig+0x4c>
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e7ab      	b.n	80017e0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001888:	f7ff fd9c 	bl	80013c4 <HAL_GetTick>
 800188c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001896:	d0c3      	beq.n	8001820 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fd94 	bl	80013c4 <HAL_GetTick>
 800189c:	1b40      	subs	r0, r0, r5
 800189e:	2864      	cmp	r0, #100	; 0x64
 80018a0:	d9f5      	bls.n	800188e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80018a2:	2003      	movs	r0, #3
 80018a4:	e160      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a6:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018ae:	d1c6      	bne.n	800183e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b0:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f013 0f02 	tst.w	r3, #2
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_OscConfig+0x12e>
 80018ba:	68e3      	ldr	r3, [r4, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	f040 8150 	bne.w	8001b62 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4a59      	ldr	r2, [pc, #356]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ca:	6921      	ldr	r1, [r4, #16]
 80018cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018d0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f013 0f08 	tst.w	r3, #8
 80018d8:	d042      	beq.n	8001960 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018da:	6963      	ldr	r3, [r4, #20]
 80018dc:	b36b      	cbz	r3, 800193a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fd6d 	bl	80013c4 <HAL_GetTick>
 80018ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ec:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f013 0f02 	tst.w	r3, #2
 80018f4:	d134      	bne.n	8001960 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fd65 	bl	80013c4 <HAL_GetTick>
 80018fa:	1b40      	subs	r0, r0, r5
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d9f5      	bls.n	80018ec <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
 8001902:	e131      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4a48      	ldr	r2, [pc, #288]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001906:	6813      	ldr	r3, [r2, #0]
 8001908:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800190c:	6921      	ldr	r1, [r4, #16]
 800190e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e7dd      	b.n	80018d2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001916:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800191c:	f7ff fd52 	bl	80013c4 <HAL_GetTick>
 8001920:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f013 0f02 	tst.w	r3, #2
 800192a:	d0d2      	beq.n	80018d2 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192c:	f7ff fd4a 	bl	80013c4 <HAL_GetTick>
 8001930:	1b40      	subs	r0, r0, r5
 8001932:	2802      	cmp	r0, #2
 8001934:	d9f5      	bls.n	8001922 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001936:	2003      	movs	r0, #3
 8001938:	e116      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <HAL_RCC_OscConfig+0x298>)
 800193c:	2200      	movs	r2, #0
 800193e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fd3f 	bl	80013c4 <HAL_GetTick>
 8001946:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194c:	f013 0f02 	tst.w	r3, #2
 8001950:	d006      	beq.n	8001960 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001952:	f7ff fd37 	bl	80013c4 <HAL_GetTick>
 8001956:	1b40      	subs	r0, r0, r5
 8001958:	2802      	cmp	r0, #2
 800195a:	d9f5      	bls.n	8001948 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 800195c:	2003      	movs	r0, #3
 800195e:	e103      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	f013 0f04 	tst.w	r3, #4
 8001966:	d077      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001968:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001970:	d133      	bne.n	80019da <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800198a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_RCC_OscConfig+0x29c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001994:	d023      	beq.n	80019de <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	68a3      	ldr	r3, [r4, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d034      	beq.n	8001a06 <HAL_RCC_OscConfig+0x272>
 800199c:	2b05      	cmp	r3, #5
 800199e:	d038      	beq.n	8001a12 <HAL_RCC_OscConfig+0x27e>
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80019a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019a4:	f022 0201 	bic.w	r2, r2, #1
 80019a8:	671a      	str	r2, [r3, #112]	; 0x70
 80019aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ac:	f022 0204 	bic.w	r2, r2, #4
 80019b0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b2:	68a3      	ldr	r3, [r4, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03d      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fd04 	bl	80013c4 <HAL_GetTick>
 80019bc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	f013 0f02 	tst.w	r3, #2
 80019c6:	d146      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fcfc 	bl	80013c4 <HAL_GetTick>
 80019cc:	1b80      	subs	r0, r0, r6
 80019ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80019d2:	4298      	cmp	r0, r3
 80019d4:	d9f3      	bls.n	80019be <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
 80019d8:	e0c6      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2500      	movs	r5, #0
 80019dc:	e7d6      	b.n	800198c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_RCC_OscConfig+0x29c>)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80019e8:	f7ff fcec 	bl	80013c4 <HAL_GetTick>
 80019ec:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_RCC_OscConfig+0x29c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019f6:	d1ce      	bne.n	8001996 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7ff fce4 	bl	80013c4 <HAL_GetTick>
 80019fc:	1b80      	subs	r0, r0, r6
 80019fe:	2802      	cmp	r0, #2
 8001a00:	d9f5      	bls.n	80019ee <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001a02:	2003      	movs	r0, #3
 8001a04:	e0b0      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001a08:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	e7cf      	b.n	80019b2 <HAL_RCC_OscConfig+0x21e>
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_OscConfig+0x294>)
 8001a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a16:	f042 0204 	orr.w	r2, r2, #4
 8001a1a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	671a      	str	r2, [r3, #112]	; 0x70
 8001a24:	e7c5      	b.n	80019b2 <HAL_RCC_OscConfig+0x21e>
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	42470000 	.word	0x42470000
 8001a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7ff fcc6 	bl	80013c4 <HAL_GetTick>
 8001a38:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3a:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f013 0f02 	tst.w	r3, #2
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff fcbe 	bl	80013c4 <HAL_GetTick>
 8001a48:	1b80      	subs	r0, r0, r6
 8001a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	d9f3      	bls.n	8001a3a <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e088      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a56:	b9ed      	cbnz	r5, 8001a94 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	69a3      	ldr	r3, [r4, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8083 	beq.w	8001b66 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a60:	4a48      	ldr	r2, [pc, #288]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001a62:	6892      	ldr	r2, [r2, #8]
 8001a64:	f002 020c 	and.w	r2, r2, #12
 8001a68:	2a08      	cmp	r2, #8
 8001a6a:	d051      	beq.n	8001b10 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d017      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <HAL_RCC_OscConfig+0x3f4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fca5 	bl	80013c4 <HAL_GetTick>
 8001a7a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7c:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a84:	d042      	beq.n	8001b0c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff fc9d 	bl	80013c4 <HAL_GetTick>
 8001a8a:	1b00      	subs	r0, r0, r4
 8001a8c:	2802      	cmp	r0, #2
 8001a8e:	d9f5      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a90:	2003      	movs	r0, #3
 8001a92:	e069      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001a96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	e7db      	b.n	8001a58 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x3f4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fc8d 	bl	80013c4 <HAL_GetTick>
 8001aaa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ab4:	d006      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fc85 	bl	80013c4 <HAL_GetTick>
 8001aba:	1b40      	subs	r0, r0, r5
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9f5      	bls.n	8001aac <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	e051      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac4:	69e3      	ldr	r3, [r4, #28]
 8001ac6:	6a22      	ldr	r2, [r4, #32]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001acc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ad0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ad2:	0852      	lsrs	r2, r2, #1
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001ae2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCC_OscConfig+0x3f4>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc6b 	bl	80013c4 <HAL_GetTick>
 8001aee:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff fc63 	bl	80013c4 <HAL_GetTick>
 8001afe:	1b00      	subs	r0, r0, r4
 8001b00:	2802      	cmp	r0, #2
 8001b02:	d9f5      	bls.n	8001af0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001b04:	2003      	movs	r0, #3
 8001b06:	e02f      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e02d      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	e02b      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d02b      	beq.n	8001b6c <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x3f0>)
 8001b16:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001b1c:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1e:	4291      	cmp	r1, r2
 8001b20:	d126      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b26:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	428a      	cmp	r2, r1
 8001b2a:	d123      	bne.n	8001b74 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b32:	401a      	ands	r2, r3
 8001b34:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001b38:	d11e      	bne.n	8001b78 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001b3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b40:	0852      	lsrs	r2, r2, #1
 8001b42:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b44:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b48:	d118      	bne.n	8001b7c <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b4a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b50:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001b54:	d114      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8001b56:	2000      	movs	r0, #0
 8001b58:	e006      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
}
 8001b5c:	4770      	bx	lr
        return HAL_ERROR;
 8001b5e:	2001      	movs	r0, #1
 8001b60:	e002      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8001b62:	2001      	movs	r0, #1
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
}
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e7fb      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
 8001b72:	e7f9      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
 8001b74:	2001      	movs	r0, #1
 8001b76:	e7f7      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
 8001b78:	2001      	movs	r0, #1
 8001b7a:	e7f5      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7f3      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
 8001b80:	2001      	movs	r0, #1
 8001b82:	e7f1      	b.n	8001b68 <HAL_RCC_OscConfig+0x3d4>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	42470000 	.word	0x42470000

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8e:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d05b      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0xc6>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d15b      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001bac:	d02c      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bb0:	6858      	ldr	r0, [r3, #4]
 8001bb2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001bb6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001bba:	ebbc 0c00 	subs.w	ip, ip, r0
 8001bbe:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001bc2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001bc6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001bca:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001bce:	ebb1 010c 	subs.w	r1, r1, ip
 8001bd2:	eb63 030e 	sbc.w	r3, r3, lr
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bdc:	00c9      	lsls	r1, r1, #3
 8001bde:	eb11 0c00 	adds.w	ip, r1, r0
 8001be2:	f143 0300 	adc.w	r3, r3, #0
 8001be6:	0259      	lsls	r1, r3, #9
 8001be8:	2300      	movs	r3, #0
 8001bea:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001bee:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001bf2:	f7fe fb3d 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c02:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c06:	e027      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c0a:	6858      	ldr	r0, [r3, #4]
 8001c0c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001c10:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001c14:	ebbc 0c00 	subs.w	ip, ip, r0
 8001c18:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001c1c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001c20:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001c24:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001c28:	ebb1 010c 	subs.w	r1, r1, ip
 8001c2c:	eb63 030e 	sbc.w	r3, r3, lr
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c36:	00c9      	lsls	r1, r1, #3
 8001c38:	eb11 0c00 	adds.w	ip, r1, r0
 8001c3c:	f143 0300 	adc.w	r3, r3, #0
 8001c40:	0299      	lsls	r1, r3, #10
 8001c42:	2300      	movs	r3, #0
 8001c44:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001c48:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001c4c:	f7fe fb10 	bl	8000270 <__aeabi_uldivmod>
 8001c50:	e7d1      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001c54:	e000      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c58:	bd08      	pop	{r3, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	007a1200 	.word	0x007a1200
 8001c64:	00f42400 	.word	0x00f42400

08001c68 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	f000 809b 	beq.w	8001da4 <HAL_RCC_ClockConfig+0x13c>
{
 8001c6e:	b570      	push	{r4, r5, r6, lr}
 8001c70:	460d      	mov	r5, r1
 8001c72:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_ClockConfig+0x14c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	428b      	cmp	r3, r1
 8001c7e:	d208      	bcs.n	8001c92 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c80:	b2cb      	uxtb	r3, r1
 8001c82:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <HAL_RCC_ClockConfig+0x14c>)
 8001c84:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	6813      	ldr	r3, [r2, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	428b      	cmp	r3, r1
 8001c8e:	f040 808b 	bne.w	8001da8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	f013 0f02 	tst.w	r3, #2
 8001c98:	d017      	beq.n	8001cca <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9a:	f013 0f04 	tst.w	r3, #4
 8001c9e:	d004      	beq.n	8001caa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca0:	4a45      	ldr	r2, [pc, #276]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001ca2:	6893      	ldr	r3, [r2, #8]
 8001ca4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ca8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	f013 0f08 	tst.w	r3, #8
 8001cb0:	d004      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb2:	4a41      	ldr	r2, [pc, #260]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001cb4:	6893      	ldr	r3, [r2, #8]
 8001cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4a3e      	ldr	r2, [pc, #248]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001cbe:	6893      	ldr	r3, [r2, #8]
 8001cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc4:	68a1      	ldr	r1, [r4, #8]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f013 0f01 	tst.w	r3, #1
 8001cd0:	d032      	beq.n	8001d38 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	6863      	ldr	r3, [r4, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d021      	beq.n	8001d1c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd8:	1e9a      	subs	r2, r3, #2
 8001cda:	2a01      	cmp	r2, #1
 8001cdc:	d925      	bls.n	8001d2a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4a36      	ldr	r2, [pc, #216]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	f012 0f02 	tst.w	r2, #2
 8001ce6:	d061      	beq.n	8001dac <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce8:	4933      	ldr	r1, [pc, #204]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001cea:	688a      	ldr	r2, [r1, #8]
 8001cec:	f022 0203 	bic.w	r2, r2, #3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fb66 	bl	80013c4 <HAL_GetTick>
 8001cf8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	6862      	ldr	r2, [r4, #4]
 8001d04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d08:	d016      	beq.n	8001d38 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff fb5b 	bl	80013c4 <HAL_GetTick>
 8001d0e:	1b80      	subs	r0, r0, r6
 8001d10:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d14:	4298      	cmp	r0, r3
 8001d16:	d9f0      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e042      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d24:	d1e0      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
 8001d28:	e03b      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d32:	d1d9      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001d34:	2001      	movs	r0, #1
 8001d36:	e034      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_ClockConfig+0x14c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	42ab      	cmp	r3, r5
 8001d42:	d907      	bls.n	8001d54 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	b2ea      	uxtb	r2, r5
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_ClockConfig+0x14c>)
 8001d48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	42ab      	cmp	r3, r5
 8001d52:	d12d      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	f013 0f04 	tst.w	r3, #4
 8001d5a:	d006      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001d5e:	6893      	ldr	r3, [r2, #8]
 8001d60:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d64:	68e1      	ldr	r1, [r4, #12]
 8001d66:	430b      	orrs	r3, r1
 8001d68:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f013 0f08 	tst.w	r3, #8
 8001d70:	d007      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001d74:	6893      	ldr	r3, [r2, #8]
 8001d76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d7a:	6921      	ldr	r1, [r4, #16]
 8001d7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d80:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d82:	f7ff ff03 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCC_ClockConfig+0x150>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <HAL_RCC_ClockConfig+0x154>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	40d8      	lsrs	r0, r3
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_RCC_ClockConfig+0x158>)
 8001d96:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x15c>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	f7ff fac6 	bl	800132c <HAL_InitTick>
  return HAL_OK;
 8001da0:	2000      	movs	r0, #0
}
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
}
 8001da6:	4770      	bx	lr
      return HAL_ERROR;
 8001da8:	2001      	movs	r0, #1
 8001daa:	e7fa      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
 8001dae:	e7f8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001db0:	2001      	movs	r0, #1
 8001db2:	e7f6      	b.n	8001da2 <HAL_RCC_ClockConfig+0x13a>
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08003500 	.word	0x08003500
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001dc8:	4b01      	ldr	r3, [pc, #4]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd6:	f7ff fff7 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001de2:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001de4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001de6:	40d8      	lsrs	r0, r3
 8001de8:	bd08      	pop	{r3, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	08003510 	.word	0x08003510

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df6:	f7ff ffe7 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e02:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e06:	40d8      	lsrs	r0, r3
 8001e08:	bd08      	pop	{r3, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08003510 	.word	0x08003510

08001e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e14:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e16:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e18:	6a04      	ldr	r4, [r0, #32]
 8001e1a:	f024 0401 	bic.w	r4, r4, #1
 8001e1e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e20:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e22:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e26:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e2a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001e2e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e30:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e32:	6203      	str	r3, [r0, #32]
}
 8001e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e3a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e3c:	6a03      	ldr	r3, [r0, #32]
 8001e3e:	f023 0310 	bic.w	r3, r3, #16
 8001e42:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e44:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001e46:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e48:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e4c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e54:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e58:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e5a:	6203      	str	r3, [r0, #32]
}
 8001e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e62:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e6e:	6083      	str	r3, [r0, #8]
}
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001e74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d137      	bne.n	8001eee <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e84:	6802      	ldr	r2, [r0, #0]
 8001e86:	68d3      	ldr	r3, [r2, #12]
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e8e:	6803      	ldr	r3, [r0, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_TIM_Base_Start_IT+0x84>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d020      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9a:	d01d      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001e9c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d019      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001ea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d015      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d011      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001eb4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00d      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001ebc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
 8001ec4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d005      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ede:	2a06      	cmp	r2, #6
 8001ee0:	d007      	beq.n	8001ef2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001eea:	2000      	movs	r0, #0
 8001eec:	4770      	bx	lr
    return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	4770      	bx	lr
  return HAL_OK;
 8001ef2:	2000      	movs	r0, #0
}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40010000 	.word	0x40010000

08001efc <HAL_TIM_PeriodElapsedCallback>:
}
 8001efc:	4770      	bx	lr

08001efe <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_IC_CaptureCallback>:
}
 8001f00:	4770      	bx	lr

08001f02 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_TriggerCallback>:
}
 8001f04:	4770      	bx	lr

08001f06 <HAL_TIM_IRQHandler>:
{
 8001f06:	b510      	push	{r4, lr}
 8001f08:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f0a:	6803      	ldr	r3, [r0, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	f012 0f02 	tst.w	r2, #2
 8001f12:	d011      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	f012 0f02 	tst.w	r2, #2
 8001f1a:	d00d      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1c:	f06f 0202 	mvn.w	r2, #2
 8001f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f26:	6803      	ldr	r3, [r0, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f013 0f03 	tst.w	r3, #3
 8001f2e:	d070      	beq.n	8002012 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f30:	f7ff ffe6 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f34:	2300      	movs	r3, #0
 8001f36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	f012 0f04 	tst.w	r2, #4
 8001f40:	d012      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	f012 0f04 	tst.w	r2, #4
 8001f48:	d00e      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4a:	f06f 0204 	mvn.w	r2, #4
 8001f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f5c:	d05f      	beq.n	800201e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ffce 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f64:	2300      	movs	r3, #0
 8001f66:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	f012 0f08 	tst.w	r2, #8
 8001f70:	d012      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	f012 0f08 	tst.w	r2, #8
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f7a:	f06f 0208 	mvn.w	r2, #8
 8001f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f80:	2304      	movs	r3, #4
 8001f82:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f013 0f03 	tst.w	r3, #3
 8001f8c:	d04e      	beq.n	800202c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff ffb6 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f94:	2300      	movs	r3, #0
 8001f96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	f012 0f10 	tst.w	r2, #16
 8001fa0:	d012      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	f012 0f10 	tst.w	r2, #16
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001faa:	f06f 0210 	mvn.w	r2, #16
 8001fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fbc:	d03d      	beq.n	800203a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ff9e 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	f012 0f01 	tst.w	r2, #1
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	f012 0f01 	tst.w	r2, #1
 8001fd8:	d136      	bne.n	8002048 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fea:	d134      	bne.n	8002056 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ffc:	d132      	bne.n	8002064 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	f012 0f20 	tst.w	r2, #32
 8002006:	d003      	beq.n	8002010 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	f012 0f20 	tst.w	r2, #32
 800200e:	d130      	bne.n	8002072 <HAL_TIM_IRQHandler+0x16c>
}
 8002010:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	f7ff ff74 	bl	8001efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002016:	4620      	mov	r0, r4
 8002018:	f7ff ff73 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
 800201c:	e78a      	b.n	8001f34 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	4620      	mov	r0, r4
 8002020:	f7ff ff6d 	bl	8001efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff ff6c 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
 800202a:	e79b      	b.n	8001f64 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202c:	4620      	mov	r0, r4
 800202e:	f7ff ff66 	bl	8001efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff ff65 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
 8002038:	e7ac      	b.n	8001f94 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff ff5f 	bl	8001efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff ff5e 	bl	8001f02 <HAL_TIM_PWM_PulseFinishedCallback>
 8002046:	e7bd      	b.n	8001fc4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	f06f 0201 	mvn.w	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff ff54 	bl	8001efc <HAL_TIM_PeriodElapsedCallback>
 8002054:	e7c1      	b.n	8001fda <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002056:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800205a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800205c:	4620      	mov	r0, r4
 800205e:	f000 f972 	bl	8002346 <HAL_TIMEx_BreakCallback>
 8002062:	e7c3      	b.n	8001fec <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002068:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff ff4a 	bl	8001f04 <HAL_TIM_TriggerCallback>
 8002070:	e7c5      	b.n	8001ffe <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002072:	f06f 0220 	mvn.w	r2, #32
 8002076:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002078:	4620      	mov	r0, r4
 800207a:	f000 f963 	bl	8002344 <HAL_TIMEx_CommutCallback>
}
 800207e:	e7c7      	b.n	8002010 <HAL_TIM_IRQHandler+0x10a>

08002080 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002080:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002082:	4a30      	ldr	r2, [pc, #192]	; (8002144 <TIM_Base_SetConfig+0xc4>)
 8002084:	4290      	cmp	r0, r2
 8002086:	d012      	beq.n	80020ae <TIM_Base_SetConfig+0x2e>
 8002088:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0x2e>
 800208e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002092:	4290      	cmp	r0, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0x2e>
 8002096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209a:	4290      	cmp	r0, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0x2e>
 800209e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a2:	4290      	cmp	r0, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0x2e>
 80020a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020aa:	4290      	cmp	r0, r2
 80020ac:	d103      	bne.n	80020b6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020b2:	684a      	ldr	r2, [r1, #4]
 80020b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <TIM_Base_SetConfig+0xc4>)
 80020b8:	4290      	cmp	r0, r2
 80020ba:	d02a      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020c0:	d027      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020c6:	4290      	cmp	r0, r2
 80020c8:	d023      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ce:	4290      	cmp	r0, r2
 80020d0:	d01f      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d6:	4290      	cmp	r0, r2
 80020d8:	d01b      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020de:	4290      	cmp	r0, r2
 80020e0:	d017      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d013      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ee:	4290      	cmp	r0, r2
 80020f0:	d00f      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020f6:	4290      	cmp	r0, r2
 80020f8:	d00b      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 80020fa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80020fe:	4290      	cmp	r0, r2
 8002100:	d007      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 8002102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002106:	4290      	cmp	r0, r2
 8002108:	d003      	beq.n	8002112 <TIM_Base_SetConfig+0x92>
 800210a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800210e:	4290      	cmp	r0, r2
 8002110:	d103      	bne.n	800211a <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002116:	68ca      	ldr	r2, [r1, #12]
 8002118:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800211a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800211e:	694a      	ldr	r2, [r1, #20]
 8002120:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002122:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002124:	688b      	ldr	r3, [r1, #8]
 8002126:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002128:	680b      	ldr	r3, [r1, #0]
 800212a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <TIM_Base_SetConfig+0xc4>)
 800212e:	4298      	cmp	r0, r3
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0xba>
 8002132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002136:	4298      	cmp	r0, r3
 8002138:	d101      	bne.n	800213e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800213a:	690b      	ldr	r3, [r1, #16]
 800213c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800213e:	2301      	movs	r3, #1
 8002140:	6143      	str	r3, [r0, #20]
}
 8002142:	4770      	bx	lr
 8002144:	40010000 	.word	0x40010000

08002148 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002148:	b340      	cbz	r0, 800219c <HAL_TIM_Base_Init+0x54>
{
 800214a:	b510      	push	{r4, lr}
 800214c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800214e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002152:	b1f3      	cbz	r3, 8002192 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002154:	2302      	movs	r3, #2
 8002156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800215a:	4621      	mov	r1, r4
 800215c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002160:	f7ff ff8e 	bl	8002080 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002164:	2301      	movs	r3, #1
 8002166:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800216e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002172:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002176:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800217e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002182:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800218a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800218e:	2000      	movs	r0, #0
}
 8002190:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002192:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002196:	f7fe fff5 	bl	8001184 <HAL_TIM_Base_MspInit>
 800219a:	e7db      	b.n	8002154 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800219c:	2001      	movs	r0, #1
}
 800219e:	4770      	bx	lr

080021a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021a0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80021ac:	430a      	orrs	r2, r1
 80021ae:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b2:	6082      	str	r2, [r0, #8]
}
 80021b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80021ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d078      	beq.n	80022b4 <HAL_TIM_ConfigClockSource+0xfa>
{
 80021c2:	b510      	push	{r4, lr}
 80021c4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021c6:	2301      	movs	r3, #1
 80021c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80021d2:	6802      	ldr	r2, [r0, #0]
 80021d4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021de:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80021e0:	680b      	ldr	r3, [r1, #0]
 80021e2:	2b60      	cmp	r3, #96	; 0x60
 80021e4:	d04c      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0xc6>
 80021e6:	d829      	bhi.n	800223c <HAL_TIM_ConfigClockSource+0x82>
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d054      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0xdc>
 80021ec:	d90c      	bls.n	8002208 <HAL_TIM_ConfigClockSource+0x4e>
 80021ee:	2b50      	cmp	r3, #80	; 0x50
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f2:	68ca      	ldr	r2, [r1, #12]
 80021f4:	6849      	ldr	r1, [r1, #4]
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f7ff fe0c 	bl	8001e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021fc:	2150      	movs	r1, #80	; 0x50
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	f7ff fe2f 	bl	8001e62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2000      	movs	r0, #0
      break;
 8002206:	e005      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002208:	2b20      	cmp	r3, #32
 800220a:	d00d      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x6e>
 800220c:	d909      	bls.n	8002222 <HAL_TIM_ConfigClockSource+0x68>
 800220e:	2b30      	cmp	r3, #48	; 0x30
 8002210:	d00a      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002212:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002214:	2301      	movs	r3, #1
 8002216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800221a:	2300      	movs	r3, #0
 800221c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002220:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002222:	b10b      	cbz	r3, 8002228 <HAL_TIM_ConfigClockSource+0x6e>
 8002224:	2b10      	cmp	r3, #16
 8002226:	d105      	bne.n	8002234 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002228:	4619      	mov	r1, r3
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	f7ff fe19 	bl	8001e62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2000      	movs	r0, #0
      break;
 8002232:	e7ef      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002234:	2001      	movs	r0, #1
 8002236:	e7ed      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
 8002238:	2001      	movs	r0, #1
 800223a:	e7eb      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800223c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002240:	d034      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0xf2>
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002246:	d10c      	bne.n	8002262 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	68cb      	ldr	r3, [r1, #12]
 800224a:	684a      	ldr	r2, [r1, #4]
 800224c:	6889      	ldr	r1, [r1, #8]
 800224e:	6800      	ldr	r0, [r0, #0]
 8002250:	f7ff ffa6 	bl	80021a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	6893      	ldr	r3, [r2, #8]
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2000      	movs	r0, #0
      break;
 8002260:	e7d8      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002262:	2b70      	cmp	r3, #112	; 0x70
 8002264:	d124      	bne.n	80022b0 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002266:	68cb      	ldr	r3, [r1, #12]
 8002268:	684a      	ldr	r2, [r1, #4]
 800226a:	6889      	ldr	r1, [r1, #8]
 800226c:	6800      	ldr	r0, [r0, #0]
 800226e:	f7ff ff97 	bl	80021a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800227a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2000      	movs	r0, #0
      break;
 800227e:	e7c9      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002280:	68ca      	ldr	r2, [r1, #12]
 8002282:	6849      	ldr	r1, [r1, #4]
 8002284:	6800      	ldr	r0, [r0, #0]
 8002286:	f7ff fdd8 	bl	8001e3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800228a:	2160      	movs	r1, #96	; 0x60
 800228c:	6820      	ldr	r0, [r4, #0]
 800228e:	f7ff fde8 	bl	8001e62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002292:	2000      	movs	r0, #0
      break;
 8002294:	e7be      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002296:	68ca      	ldr	r2, [r1, #12]
 8002298:	6849      	ldr	r1, [r1, #4]
 800229a:	6800      	ldr	r0, [r0, #0]
 800229c:	f7ff fdba 	bl	8001e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	f7ff fddd 	bl	8001e62 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80022a8:	2000      	movs	r0, #0
      break;
 80022aa:	e7b3      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80022ac:	2000      	movs	r0, #0
 80022ae:	e7b1      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
 80022b2:	e7af      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80022b4:	2002      	movs	r0, #2
}
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80022bc:	2a01      	cmp	r2, #1
 80022be:	d03d      	beq.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80022c0:	b410      	push	{r4}
 80022c2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80022c4:	2201      	movs	r2, #1
 80022c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ca:	2202      	movs	r2, #2
 80022cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022d0:	6802      	ldr	r2, [r0, #0]
 80022d2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022d4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d6:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022da:	6808      	ldr	r0, [r1, #0]
 80022dc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80022e6:	4282      	cmp	r2, r0
 80022e8:	d01a      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80022ea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80022ee:	d017      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80022f0:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
 80022f4:	4282      	cmp	r2, r0
 80022f6:	d013      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80022f8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80022fc:	4282      	cmp	r2, r0
 80022fe:	d00f      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002300:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002304:	4282      	cmp	r2, r0
 8002306:	d00b      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002308:	f500 4078 	add.w	r0, r0, #63488	; 0xf800
 800230c:	4282      	cmp	r2, r0
 800230e:	d007      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002310:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8002314:	4282      	cmp	r2, r0
 8002316:	d003      	beq.n	8002320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002318:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800231c:	4282      	cmp	r2, r0
 800231e:	d104      	bne.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002320:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002324:	6849      	ldr	r1, [r1, #4]
 8002326:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002328:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002330:	2000      	movs	r0, #0
 8002332:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8002336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800233a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800233c:	2002      	movs	r0, #2
}
 800233e:	4770      	bx	lr
 8002340:	40010000 	.word	0x40010000

08002344 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002344:	4770      	bx	lr

08002346 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002346:	4770      	bx	lr

08002348 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002348:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	f102 030c 	add.w	r3, r2, #12
 800234e:	e853 3f00 	ldrex	r3, [r3]
 8002352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	320c      	adds	r2, #12
 8002358:	e842 3100 	strex	r1, r3, [r2]
 800235c:	2900      	cmp	r1, #0
 800235e:	d1f3      	bne.n	8002348 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002360:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002362:	f102 0314 	add.w	r3, r2, #20
 8002366:	e853 3f00 	ldrex	r3, [r3]
 800236a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236e:	3214      	adds	r2, #20
 8002370:	e842 3100 	strex	r1, r3, [r2]
 8002374:	2900      	cmp	r1, #0
 8002376:	d1f3      	bne.n	8002360 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002378:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800237e:	2320      	movs	r3, #32
 8002380:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002384:	2300      	movs	r3, #0
 8002386:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002388:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800238a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238c:	f102 030c 	add.w	r3, r2, #12
 8002390:	e853 3f00 	ldrex	r3, [r3]
 8002394:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002398:	320c      	adds	r2, #12
 800239a:	e842 3100 	strex	r1, r3, [r2]
 800239e:	2900      	cmp	r1, #0
 80023a0:	d1f3      	bne.n	800238a <UART_EndRxTransfer+0x42>
 80023a2:	e7ec      	b.n	800237e <UART_EndRxTransfer+0x36>

080023a4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b21      	cmp	r3, #33	; 0x21
 80023ac:	d001      	beq.n	80023b2 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2002      	movs	r0, #2
  }
}
 80023b0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b2:	6883      	ldr	r3, [r0, #8]
 80023b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b8:	d017      	beq.n	80023ea <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023ba:	6a03      	ldr	r3, [r0, #32]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	6202      	str	r2, [r0, #32]
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	6803      	ldr	r3, [r0, #0]
 80023c4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80023c6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	84c3      	strh	r3, [r0, #38]	; 0x26
 80023d0:	b94b      	cbnz	r3, 80023e6 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023d2:	6802      	ldr	r2, [r0, #0]
 80023d4:	68d3      	ldr	r3, [r2, #12]
 80023d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023da:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023dc:	6802      	ldr	r2, [r0, #0]
 80023de:	68d3      	ldr	r3, [r2, #12]
 80023e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e4:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80023e6:	2000      	movs	r0, #0
 80023e8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ea:	6903      	ldr	r3, [r0, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e4      	bne.n	80023ba <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023f0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	6802      	ldr	r2, [r0, #0]
 80023f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fa:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80023fc:	6a03      	ldr	r3, [r0, #32]
 80023fe:	3302      	adds	r3, #2
 8002400:	6203      	str	r3, [r0, #32]
 8002402:	e7e0      	b.n	80023c6 <UART_Transmit_IT+0x22>

08002404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	b510      	push	{r4, lr}
 8002406:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002408:	6802      	ldr	r2, [r0, #0]
 800240a:	6913      	ldr	r3, [r2, #16]
 800240c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002410:	68c1      	ldr	r1, [r0, #12]
 8002412:	430b      	orrs	r3, r1
 8002414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002416:	6883      	ldr	r3, [r0, #8]
 8002418:	6902      	ldr	r2, [r0, #16]
 800241a:	431a      	orrs	r2, r3
 800241c:	6943      	ldr	r3, [r0, #20]
 800241e:	431a      	orrs	r2, r3
 8002420:	69c3      	ldr	r3, [r0, #28]
 8002422:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002424:	6801      	ldr	r1, [r0, #0]
 8002426:	68cb      	ldr	r3, [r1, #12]
 8002428:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800242c:	f023 030c 	bic.w	r3, r3, #12
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002434:	6802      	ldr	r2, [r0, #0]
 8002436:	6953      	ldr	r3, [r2, #20]
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243c:	6981      	ldr	r1, [r0, #24]
 800243e:	430b      	orrs	r3, r1
 8002440:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	4a31      	ldr	r2, [pc, #196]	; (800250c <UART_SetConfig+0x108>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d006      	beq.n	8002458 <UART_SetConfig+0x54>
 800244a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800244e:	4293      	cmp	r3, r2
 8002450:	d002      	beq.n	8002458 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002452:	f7ff fcbf 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002456:	e001      	b.n	800245c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002458:	f7ff fccc 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800245c:	69e3      	ldr	r3, [r4, #28]
 800245e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002462:	d029      	beq.n	80024b8 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002464:	2100      	movs	r1, #0
 8002466:	1803      	adds	r3, r0, r0
 8002468:	4149      	adcs	r1, r1
 800246a:	181b      	adds	r3, r3, r0
 800246c:	f141 0100 	adc.w	r1, r1, #0
 8002470:	00c9      	lsls	r1, r1, #3
 8002472:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1818      	adds	r0, r3, r0
 800247a:	6863      	ldr	r3, [r4, #4]
 800247c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002480:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002484:	f141 0100 	adc.w	r1, r1, #0
 8002488:	f7fd fef2 	bl	8000270 <__aeabi_uldivmod>
 800248c:	4a20      	ldr	r2, [pc, #128]	; (8002510 <UART_SetConfig+0x10c>)
 800248e:	fba2 3100 	umull	r3, r1, r2, r0
 8002492:	0949      	lsrs	r1, r1, #5
 8002494:	2364      	movs	r3, #100	; 0x64
 8002496:	fb03 0311 	mls	r3, r3, r1, r0
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	3332      	adds	r3, #50	; 0x32
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024a8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	6821      	ldr	r1, [r4, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }
}
 80024b6:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b8:	2300      	movs	r3, #0
 80024ba:	1802      	adds	r2, r0, r0
 80024bc:	eb43 0103 	adc.w	r1, r3, r3
 80024c0:	1812      	adds	r2, r2, r0
 80024c2:	f141 0100 	adc.w	r1, r1, #0
 80024c6:	00c9      	lsls	r1, r1, #3
 80024c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	1810      	adds	r0, r2, r0
 80024d0:	f141 0100 	adc.w	r1, r1, #0
 80024d4:	6862      	ldr	r2, [r4, #4]
 80024d6:	1892      	adds	r2, r2, r2
 80024d8:	415b      	adcs	r3, r3
 80024da:	f7fd fec9 	bl	8000270 <__aeabi_uldivmod>
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <UART_SetConfig+0x10c>)
 80024e0:	fba2 3100 	umull	r3, r1, r2, r0
 80024e4:	0949      	lsrs	r1, r1, #5
 80024e6:	2364      	movs	r3, #100	; 0x64
 80024e8:	fb03 0311 	mls	r3, r3, r1, r0
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	3332      	adds	r3, #50	; 0x32
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	005a      	lsls	r2, r3, #1
 80024f8:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80024fc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	6821      	ldr	r1, [r4, #0]
 8002506:	4413      	add	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
 800250a:	e7d4      	b.n	80024b6 <UART_SetConfig+0xb2>
 800250c:	40011000 	.word	0x40011000
 8002510:	51eb851f 	.word	0x51eb851f

08002514 <HAL_UART_Init>:
  if (huart == NULL)
 8002514:	b358      	cbz	r0, 800256e <HAL_UART_Init+0x5a>
{
 8002516:	b510      	push	{r4, lr}
 8002518:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800251e:	b30b      	cbz	r3, 8002564 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002520:	2324      	movs	r3, #36	; 0x24
 8002522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	68d3      	ldr	r3, [r2, #12]
 800252a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800252e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff ff67 	bl	8002404 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	6913      	ldr	r3, [r2, #16]
 800253a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800253e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	6953      	ldr	r3, [r2, #20]
 8002544:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002548:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	68d3      	ldr	r3, [r2, #12]
 800254e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002552:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	2000      	movs	r0, #0
 8002556:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002558:	2320      	movs	r3, #32
 800255a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800255e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002562:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002564:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002568:	f7fe fe2a 	bl	80011c0 <HAL_UART_MspInit>
 800256c:	e7d8      	b.n	8002520 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800256e:	2001      	movs	r0, #1
}
 8002570:	4770      	bx	lr

08002572 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b20      	cmp	r3, #32
 800257a:	d119      	bne.n	80025b0 <HAL_UART_Transmit_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 800257c:	b1d1      	cbz	r1, 80025b4 <HAL_UART_Transmit_IT+0x42>
 800257e:	b1da      	cbz	r2, 80025b8 <HAL_UART_Transmit_IT+0x46>
    __HAL_LOCK(huart);
 8002580:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d019      	beq.n	80025bc <HAL_UART_Transmit_IT+0x4a>
 8002588:	2301      	movs	r3, #1
 800258a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 800258e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002590:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002592:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002594:	2300      	movs	r3, #0
 8002596:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002598:	2221      	movs	r2, #33	; 0x21
 800259a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 800259e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80025a2:	6801      	ldr	r1, [r0, #0]
 80025a4:	68ca      	ldr	r2, [r1, #12]
 80025a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025aa:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80025ac:	4618      	mov	r0, r3
 80025ae:	4770      	bx	lr
    return HAL_BUSY;
 80025b0:	2002      	movs	r0, #2
 80025b2:	4770      	bx	lr
      return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
 80025b6:	4770      	bx	lr
 80025b8:	2001      	movs	r0, #1
 80025ba:	4770      	bx	lr
    __HAL_LOCK(huart);
 80025bc:	2002      	movs	r0, #2
}
 80025be:	4770      	bx	lr

080025c0 <HAL_UART_TxCpltCallback>:
}
 80025c0:	4770      	bx	lr

080025c2 <UART_EndTransmit_IT>:
{
 80025c2:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025c4:	6801      	ldr	r1, [r0, #0]
 80025c6:	68ca      	ldr	r2, [r1, #12]
 80025c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025cc:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025ce:	2220      	movs	r2, #32
 80025d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80025d4:	f7ff fff4 	bl	80025c0 <HAL_UART_TxCpltCallback>
}
 80025d8:	2000      	movs	r0, #0
 80025da:	bd08      	pop	{r3, pc}

080025dc <HAL_UART_RxCpltCallback>:
}
 80025dc:	4770      	bx	lr

080025de <HAL_UART_ErrorCallback>:
}
 80025de:	4770      	bx	lr

080025e0 <UART_DMAAbortOnError>:
{
 80025e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025e8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80025ea:	f7ff fff8 	bl	80025de <HAL_UART_ErrorCallback>
}
 80025ee:	bd08      	pop	{r3, pc}

080025f0 <HAL_UARTEx_RxEventCallback>:
}
 80025f0:	4770      	bx	lr

080025f2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025f2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b22      	cmp	r3, #34	; 0x22
 80025fa:	d167      	bne.n	80026cc <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fc:	6883      	ldr	r3, [r0, #8]
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d04d      	beq.n	80026a0 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002604:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	d004      	beq.n	8002616 <UART_Receive_IT+0x24>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d154      	bne.n	80026ba <UART_Receive_IT+0xc8>
 8002610:	6903      	ldr	r3, [r0, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d151      	bne.n	80026ba <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800261c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800261e:	3301      	adds	r3, #1
 8002620:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002622:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29b      	uxth	r3, r3
 800262a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800262c:	2b00      	cmp	r3, #0
 800262e:	d14f      	bne.n	80026d0 <UART_Receive_IT+0xde>
{
 8002630:	b500      	push	{lr}
 8002632:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002634:	6802      	ldr	r2, [r0, #0]
 8002636:	68d3      	ldr	r3, [r2, #12]
 8002638:	f023 0320 	bic.w	r3, r3, #32
 800263c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800263e:	6802      	ldr	r2, [r0, #0]
 8002640:	68d3      	ldr	r3, [r2, #12]
 8002642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002646:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002648:	6802      	ldr	r2, [r0, #0]
 800264a:	6953      	ldr	r3, [r2, #20]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002652:	2320      	movs	r3, #32
 8002654:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002658:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800265a:	2b01      	cmp	r3, #1
 800265c:	d133      	bne.n	80026c6 <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265e:	2300      	movs	r3, #0
 8002660:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002662:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	f102 030c 	add.w	r3, r2, #12
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	320c      	adds	r2, #12
 8002672:	e842 3100 	strex	r1, r3, [r2]
 8002676:	2900      	cmp	r1, #0
 8002678:	d1f3      	bne.n	8002662 <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800267a:	6803      	ldr	r3, [r0, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f012 0f10 	tst.w	r2, #16
 8002682:	d006      	beq.n	8002692 <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002684:	2200      	movs	r2, #0
 8002686:	9201      	str	r2, [sp, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	9201      	str	r2, [sp, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002692:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002694:	f7ff ffac 	bl	80025f0 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002698:	2000      	movs	r0, #0
}
 800269a:	b003      	add	sp, #12
 800269c:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a0:	6902      	ldr	r2, [r0, #16]
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	d1ae      	bne.n	8002604 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026a8:	6803      	ldr	r3, [r0, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80026b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026b4:	3302      	adds	r3, #2
 80026b6:	6283      	str	r3, [r0, #40]	; 0x28
 80026b8:	e7b3      	b.n	8002622 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026ba:	6803      	ldr	r3, [r0, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c2:	7013      	strb	r3, [r2, #0]
 80026c4:	e7aa      	b.n	800261c <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80026c6:	f7ff ff89 	bl	80025dc <HAL_UART_RxCpltCallback>
 80026ca:	e7e5      	b.n	8002698 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 80026cc:	2002      	movs	r0, #2
 80026ce:	4770      	bx	lr
    return HAL_OK;
 80026d0:	2000      	movs	r0, #0
}
 80026d2:	4770      	bx	lr

080026d4 <HAL_UART_IRQHandler>:
{
 80026d4:	b530      	push	{r4, r5, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026da:	6802      	ldr	r2, [r0, #0]
 80026dc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026de:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80026e2:	f013 050f 	ands.w	r5, r3, #15
 80026e6:	d105      	bne.n	80026f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026e8:	f013 0f20 	tst.w	r3, #32
 80026ec:	d002      	beq.n	80026f4 <HAL_UART_IRQHandler+0x20>
 80026ee:	f010 0f20 	tst.w	r0, #32
 80026f2:	d119      	bne.n	8002728 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026f4:	b12d      	cbz	r5, 8002702 <HAL_UART_IRQHandler+0x2e>
 80026f6:	f011 0101 	ands.w	r1, r1, #1
 80026fa:	d119      	bne.n	8002730 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026fc:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002700:	d116      	bne.n	8002730 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002702:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002704:	2901      	cmp	r1, #1
 8002706:	d07d      	beq.n	8002804 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002708:	f013 0f80 	tst.w	r3, #128	; 0x80
 800270c:	d003      	beq.n	8002716 <HAL_UART_IRQHandler+0x42>
 800270e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002712:	f040 8115 	bne.w	8002940 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002716:	f013 0f40 	tst.w	r3, #64	; 0x40
 800271a:	d003      	beq.n	8002724 <HAL_UART_IRQHandler+0x50>
 800271c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002720:	f040 8112 	bne.w	8002948 <HAL_UART_IRQHandler+0x274>
}
 8002724:	b003      	add	sp, #12
 8002726:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ff62 	bl	80025f2 <UART_Receive_IT>
      return;
 800272e:	e7f9      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002730:	f013 0f01 	tst.w	r3, #1
 8002734:	d006      	beq.n	8002744 <HAL_UART_IRQHandler+0x70>
 8002736:	f410 7f80 	tst.w	r0, #256	; 0x100
 800273a:	d003      	beq.n	8002744 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800273c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002744:	f013 0f04 	tst.w	r3, #4
 8002748:	d004      	beq.n	8002754 <HAL_UART_IRQHandler+0x80>
 800274a:	b119      	cbz	r1, 8002754 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800274e:	f042 0202 	orr.w	r2, r2, #2
 8002752:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002754:	f013 0f02 	tst.w	r3, #2
 8002758:	d004      	beq.n	8002764 <HAL_UART_IRQHandler+0x90>
 800275a:	b119      	cbz	r1, 8002764 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800275c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800275e:	f042 0204 	orr.w	r2, r2, #4
 8002762:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002764:	f013 0f08 	tst.w	r3, #8
 8002768:	d007      	beq.n	800277a <HAL_UART_IRQHandler+0xa6>
 800276a:	f010 0f20 	tst.w	r0, #32
 800276e:	d100      	bne.n	8002772 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002770:	b119      	cbz	r1, 800277a <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002772:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002774:	f042 0208 	orr.w	r2, r2, #8
 8002778:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800277a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800277c:	2a00      	cmp	r2, #0
 800277e:	d0d1      	beq.n	8002724 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002780:	f013 0f20 	tst.w	r3, #32
 8002784:	d002      	beq.n	800278c <HAL_UART_IRQHandler+0xb8>
 8002786:	f010 0f20 	tst.w	r0, #32
 800278a:	d129      	bne.n	80027e0 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002794:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002796:	f012 0f08 	tst.w	r2, #8
 800279a:	d100      	bne.n	800279e <HAL_UART_IRQHandler+0xca>
 800279c:	b363      	cbz	r3, 80027f8 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff fdd2 	bl	8002348 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ac:	d020      	beq.n	80027f0 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	f102 0314 	add.w	r3, r2, #20
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	3214      	adds	r2, #20
 80027be:	e842 3100 	strex	r1, r3, [r2]
 80027c2:	2900      	cmp	r1, #0
 80027c4:	d1f3      	bne.n	80027ae <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 80027c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027c8:	b173      	cbz	r3, 80027e8 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ca:	4a61      	ldr	r2, [pc, #388]	; (8002950 <HAL_UART_IRQHandler+0x27c>)
 80027cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027d0:	f7fe fec8 	bl	8001564 <HAL_DMA_Abort_IT>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d0a5      	beq.n	8002724 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027dc:	4798      	blx	r3
 80027de:	e7a1      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff ff06 	bl	80025f2 <UART_Receive_IT>
 80027e6:	e7d1      	b.n	800278c <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff fef8 	bl	80025de <HAL_UART_ErrorCallback>
 80027ee:	e799      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fef4 	bl	80025de <HAL_UART_ErrorCallback>
 80027f6:	e795      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff fef0 	bl	80025de <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	2300      	movs	r3, #0
 8002800:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8002802:	e78f      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002804:	f013 0f10 	tst.w	r3, #16
 8002808:	f43f af7e 	beq.w	8002708 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800280c:	f010 0f10 	tst.w	r0, #16
 8002810:	f43f af7a 	beq.w	8002708 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002814:	2300      	movs	r3, #0
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	6853      	ldr	r3, [r2, #4]
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002822:	6953      	ldr	r3, [r2, #20]
 8002824:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002828:	d050      	beq.n	80028cc <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800282a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002832:	2b00      	cmp	r3, #0
 8002834:	f43f af76 	beq.w	8002724 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002838:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800283a:	4299      	cmp	r1, r3
 800283c:	f67f af72 	bls.w	8002724 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8002840:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002842:	69d3      	ldr	r3, [r2, #28]
 8002844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002848:	d037      	beq.n	80028ba <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800284a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284c:	f102 030c 	add.w	r3, r2, #12
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	320c      	adds	r2, #12
 800285a:	e842 3100 	strex	r1, r3, [r2]
 800285e:	2900      	cmp	r1, #0
 8002860:	d1f3      	bne.n	800284a <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	f102 0314 	add.w	r3, r2, #20
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	3214      	adds	r2, #20
 8002872:	e842 3100 	strex	r1, r3, [r2]
 8002876:	2900      	cmp	r1, #0
 8002878:	d1f3      	bne.n	8002862 <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800287a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287c:	f102 0314 	add.w	r3, r2, #20
 8002880:	e853 3f00 	ldrex	r3, [r3]
 8002884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	3214      	adds	r2, #20
 800288a:	e842 3100 	strex	r1, r3, [r2]
 800288e:	2900      	cmp	r1, #0
 8002890:	d1f3      	bne.n	800287a <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8002892:	2320      	movs	r3, #32
 8002894:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002898:	2300      	movs	r3, #0
 800289a:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	f102 030c 	add.w	r3, r2, #12
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	320c      	adds	r2, #12
 80028ac:	e842 3100 	strex	r1, r3, [r2]
 80028b0:	2900      	cmp	r1, #0
 80028b2:	d1f3      	bne.n	800289c <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028b6:	f7fe fe0b 	bl	80014d0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ba:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80028bc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	1ac9      	subs	r1, r1, r3
 80028c2:	b289      	uxth	r1, r1
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff fe93 	bl	80025f0 <HAL_UARTEx_RxEventCallback>
      return;
 80028ca:	e72b      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80028ce:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	1ac9      	subs	r1, r1, r3
 80028d4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80028d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f43f af22 	beq.w	8002724 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 80028e0:	2900      	cmp	r1, #0
 80028e2:	f43f af1f 	beq.w	8002724 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	f102 030c 	add.w	r3, r2, #12
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	320c      	adds	r2, #12
 80028f6:	e842 3000 	strex	r0, r3, [r2]
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d1f3      	bne.n	80028e6 <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	f102 0314 	add.w	r3, r2, #20
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	3214      	adds	r2, #20
 800290e:	e842 3000 	strex	r0, r3, [r2]
 8002912:	2800      	cmp	r0, #0
 8002914:	d1f3      	bne.n	80028fe <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8002916:	2320      	movs	r3, #32
 8002918:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291c:	2300      	movs	r3, #0
 800291e:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002920:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	f102 030c 	add.w	r3, r2, #12
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	320c      	adds	r2, #12
 8002930:	e842 3000 	strex	r0, r3, [r2]
 8002934:	2800      	cmp	r0, #0
 8002936:	d1f3      	bne.n	8002920 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff fe59 	bl	80025f0 <HAL_UARTEx_RxEventCallback>
      return;
 800293e:	e6f1      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff fd2f 	bl	80023a4 <UART_Transmit_IT>
    return;
 8002946:	e6ed      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff fe3a 	bl	80025c2 <UART_EndTransmit_IT>
    return;
 800294e:	e6e9      	b.n	8002724 <HAL_UART_IRQHandler+0x50>
 8002950:	080025e1 	.word	0x080025e1

08002954 <_vsniprintf_r>:
 8002954:	b530      	push	{r4, r5, lr}
 8002956:	4614      	mov	r4, r2
 8002958:	2c00      	cmp	r4, #0
 800295a:	b09b      	sub	sp, #108	; 0x6c
 800295c:	4605      	mov	r5, r0
 800295e:	461a      	mov	r2, r3
 8002960:	da05      	bge.n	800296e <_vsniprintf_r+0x1a>
 8002962:	238b      	movs	r3, #139	; 0x8b
 8002964:	6003      	str	r3, [r0, #0]
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	b01b      	add	sp, #108	; 0x6c
 800296c:	bd30      	pop	{r4, r5, pc}
 800296e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002972:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002976:	bf14      	ite	ne
 8002978:	f104 33ff 	addne.w	r3, r4, #4294967295
 800297c:	4623      	moveq	r3, r4
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	9305      	str	r3, [sp, #20]
 8002982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002986:	9100      	str	r1, [sp, #0]
 8002988:	9104      	str	r1, [sp, #16]
 800298a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800298e:	4669      	mov	r1, sp
 8002990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002992:	f000 f9ad 	bl	8002cf0 <_svfiprintf_r>
 8002996:	1c43      	adds	r3, r0, #1
 8002998:	bfbc      	itt	lt
 800299a:	238b      	movlt	r3, #139	; 0x8b
 800299c:	602b      	strlt	r3, [r5, #0]
 800299e:	2c00      	cmp	r4, #0
 80029a0:	d0e3      	beq.n	800296a <_vsniprintf_r+0x16>
 80029a2:	9b00      	ldr	r3, [sp, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e7df      	b.n	800296a <_vsniprintf_r+0x16>
	...

080029ac <vsniprintf>:
 80029ac:	b507      	push	{r0, r1, r2, lr}
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	460a      	mov	r2, r1
 80029b4:	4601      	mov	r1, r0
 80029b6:	4803      	ldr	r0, [pc, #12]	; (80029c4 <vsniprintf+0x18>)
 80029b8:	6800      	ldr	r0, [r0, #0]
 80029ba:	f7ff ffcb 	bl	8002954 <_vsniprintf_r>
 80029be:	b003      	add	sp, #12
 80029c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80029c4:	20000058 	.word	0x20000058

080029c8 <memset>:
 80029c8:	4402      	add	r2, r0
 80029ca:	4603      	mov	r3, r0
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	f803 1b01 	strb.w	r1, [r3], #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <__errno>:
 80029d8:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <__errno+0x8>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000058 	.word	0x20000058

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	4d0d      	ldr	r5, [pc, #52]	; (8002a1c <__libc_init_array+0x38>)
 80029e8:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ea:	1b64      	subs	r4, r4, r5
 80029ec:	10a4      	asrs	r4, r4, #2
 80029ee:	2600      	movs	r6, #0
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	4d0b      	ldr	r5, [pc, #44]	; (8002a24 <__libc_init_array+0x40>)
 80029f6:	4c0c      	ldr	r4, [pc, #48]	; (8002a28 <__libc_init_array+0x44>)
 80029f8:	f000 fc6a 	bl	80032d0 <_init>
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	2600      	movs	r6, #0
 8002a02:	42a6      	cmp	r6, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0c:	4798      	blx	r3
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a16:	4798      	blx	r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08003554 	.word	0x08003554
 8002a20:	08003554 	.word	0x08003554
 8002a24:	08003554 	.word	0x08003554
 8002a28:	08003558 	.word	0x08003558

08002a2c <__retarget_lock_acquire_recursive>:
 8002a2c:	4770      	bx	lr

08002a2e <__retarget_lock_release_recursive>:
 8002a2e:	4770      	bx	lr

08002a30 <memcpy>:
 8002a30:	440a      	add	r2, r1
 8002a32:	4291      	cmp	r1, r2
 8002a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a38:	d100      	bne.n	8002a3c <memcpy+0xc>
 8002a3a:	4770      	bx	lr
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a46:	4291      	cmp	r1, r2
 8002a48:	d1f9      	bne.n	8002a3e <memcpy+0xe>
 8002a4a:	bd10      	pop	{r4, pc}

08002a4c <_free_r>:
 8002a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	d044      	beq.n	8002adc <_free_r+0x90>
 8002a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a56:	9001      	str	r0, [sp, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8002a5e:	bfb8      	it	lt
 8002a60:	18e4      	addlt	r4, r4, r3
 8002a62:	f000 f8df 	bl	8002c24 <__malloc_lock>
 8002a66:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <_free_r+0x94>)
 8002a68:	9801      	ldr	r0, [sp, #4]
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	b933      	cbnz	r3, 8002a7c <_free_r+0x30>
 8002a6e:	6063      	str	r3, [r4, #4]
 8002a70:	6014      	str	r4, [r2, #0]
 8002a72:	b003      	add	sp, #12
 8002a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a78:	f000 b8da 	b.w	8002c30 <__malloc_unlock>
 8002a7c:	42a3      	cmp	r3, r4
 8002a7e:	d908      	bls.n	8002a92 <_free_r+0x46>
 8002a80:	6825      	ldr	r5, [r4, #0]
 8002a82:	1961      	adds	r1, r4, r5
 8002a84:	428b      	cmp	r3, r1
 8002a86:	bf01      	itttt	eq
 8002a88:	6819      	ldreq	r1, [r3, #0]
 8002a8a:	685b      	ldreq	r3, [r3, #4]
 8002a8c:	1949      	addeq	r1, r1, r5
 8002a8e:	6021      	streq	r1, [r4, #0]
 8002a90:	e7ed      	b.n	8002a6e <_free_r+0x22>
 8002a92:	461a      	mov	r2, r3
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	b10b      	cbz	r3, 8002a9c <_free_r+0x50>
 8002a98:	42a3      	cmp	r3, r4
 8002a9a:	d9fa      	bls.n	8002a92 <_free_r+0x46>
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	1855      	adds	r5, r2, r1
 8002aa0:	42a5      	cmp	r5, r4
 8002aa2:	d10b      	bne.n	8002abc <_free_r+0x70>
 8002aa4:	6824      	ldr	r4, [r4, #0]
 8002aa6:	4421      	add	r1, r4
 8002aa8:	1854      	adds	r4, r2, r1
 8002aaa:	42a3      	cmp	r3, r4
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	d1e0      	bne.n	8002a72 <_free_r+0x26>
 8002ab0:	681c      	ldr	r4, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	6053      	str	r3, [r2, #4]
 8002ab6:	440c      	add	r4, r1
 8002ab8:	6014      	str	r4, [r2, #0]
 8002aba:	e7da      	b.n	8002a72 <_free_r+0x26>
 8002abc:	d902      	bls.n	8002ac4 <_free_r+0x78>
 8002abe:	230c      	movs	r3, #12
 8002ac0:	6003      	str	r3, [r0, #0]
 8002ac2:	e7d6      	b.n	8002a72 <_free_r+0x26>
 8002ac4:	6825      	ldr	r5, [r4, #0]
 8002ac6:	1961      	adds	r1, r4, r5
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	bf04      	itt	eq
 8002acc:	6819      	ldreq	r1, [r3, #0]
 8002ace:	685b      	ldreq	r3, [r3, #4]
 8002ad0:	6063      	str	r3, [r4, #4]
 8002ad2:	bf04      	itt	eq
 8002ad4:	1949      	addeq	r1, r1, r5
 8002ad6:	6021      	streq	r1, [r4, #0]
 8002ad8:	6054      	str	r4, [r2, #4]
 8002ada:	e7ca      	b.n	8002a72 <_free_r+0x26>
 8002adc:	b003      	add	sp, #12
 8002ade:	bd30      	pop	{r4, r5, pc}
 8002ae0:	20001310 	.word	0x20001310

08002ae4 <sbrk_aligned>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	4e0e      	ldr	r6, [pc, #56]	; (8002b20 <sbrk_aligned+0x3c>)
 8002ae8:	460c      	mov	r4, r1
 8002aea:	6831      	ldr	r1, [r6, #0]
 8002aec:	4605      	mov	r5, r0
 8002aee:	b911      	cbnz	r1, 8002af6 <sbrk_aligned+0x12>
 8002af0:	f000 fba6 	bl	8003240 <_sbrk_r>
 8002af4:	6030      	str	r0, [r6, #0]
 8002af6:	4621      	mov	r1, r4
 8002af8:	4628      	mov	r0, r5
 8002afa:	f000 fba1 	bl	8003240 <_sbrk_r>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d00a      	beq.n	8002b18 <sbrk_aligned+0x34>
 8002b02:	1cc4      	adds	r4, r0, #3
 8002b04:	f024 0403 	bic.w	r4, r4, #3
 8002b08:	42a0      	cmp	r0, r4
 8002b0a:	d007      	beq.n	8002b1c <sbrk_aligned+0x38>
 8002b0c:	1a21      	subs	r1, r4, r0
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f000 fb96 	bl	8003240 <_sbrk_r>
 8002b14:	3001      	adds	r0, #1
 8002b16:	d101      	bne.n	8002b1c <sbrk_aligned+0x38>
 8002b18:	f04f 34ff 	mov.w	r4, #4294967295
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	20001314 	.word	0x20001314

08002b24 <_malloc_r>:
 8002b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b28:	1ccd      	adds	r5, r1, #3
 8002b2a:	f025 0503 	bic.w	r5, r5, #3
 8002b2e:	3508      	adds	r5, #8
 8002b30:	2d0c      	cmp	r5, #12
 8002b32:	bf38      	it	cc
 8002b34:	250c      	movcc	r5, #12
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	4607      	mov	r7, r0
 8002b3a:	db01      	blt.n	8002b40 <_malloc_r+0x1c>
 8002b3c:	42a9      	cmp	r1, r5
 8002b3e:	d905      	bls.n	8002b4c <_malloc_r+0x28>
 8002b40:	230c      	movs	r3, #12
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	2600      	movs	r6, #0
 8002b46:	4630      	mov	r0, r6
 8002b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c20 <_malloc_r+0xfc>
 8002b50:	f000 f868 	bl	8002c24 <__malloc_lock>
 8002b54:	f8d8 3000 	ldr.w	r3, [r8]
 8002b58:	461c      	mov	r4, r3
 8002b5a:	bb5c      	cbnz	r4, 8002bb4 <_malloc_r+0x90>
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	4638      	mov	r0, r7
 8002b60:	f7ff ffc0 	bl	8002ae4 <sbrk_aligned>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	4604      	mov	r4, r0
 8002b68:	d155      	bne.n	8002c16 <_malloc_r+0xf2>
 8002b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8002b6e:	4626      	mov	r6, r4
 8002b70:	2e00      	cmp	r6, #0
 8002b72:	d145      	bne.n	8002c00 <_malloc_r+0xdc>
 8002b74:	2c00      	cmp	r4, #0
 8002b76:	d048      	beq.n	8002c0a <_malloc_r+0xe6>
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	4631      	mov	r1, r6
 8002b7c:	4638      	mov	r0, r7
 8002b7e:	eb04 0903 	add.w	r9, r4, r3
 8002b82:	f000 fb5d 	bl	8003240 <_sbrk_r>
 8002b86:	4581      	cmp	r9, r0
 8002b88:	d13f      	bne.n	8002c0a <_malloc_r+0xe6>
 8002b8a:	6821      	ldr	r1, [r4, #0]
 8002b8c:	1a6d      	subs	r5, r5, r1
 8002b8e:	4629      	mov	r1, r5
 8002b90:	4638      	mov	r0, r7
 8002b92:	f7ff ffa7 	bl	8002ae4 <sbrk_aligned>
 8002b96:	3001      	adds	r0, #1
 8002b98:	d037      	beq.n	8002c0a <_malloc_r+0xe6>
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	442b      	add	r3, r5
 8002b9e:	6023      	str	r3, [r4, #0]
 8002ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d038      	beq.n	8002c1a <_malloc_r+0xf6>
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	42a2      	cmp	r2, r4
 8002bac:	d12b      	bne.n	8002c06 <_malloc_r+0xe2>
 8002bae:	2200      	movs	r2, #0
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e00f      	b.n	8002bd4 <_malloc_r+0xb0>
 8002bb4:	6822      	ldr	r2, [r4, #0]
 8002bb6:	1b52      	subs	r2, r2, r5
 8002bb8:	d41f      	bmi.n	8002bfa <_malloc_r+0xd6>
 8002bba:	2a0b      	cmp	r2, #11
 8002bbc:	d917      	bls.n	8002bee <_malloc_r+0xca>
 8002bbe:	1961      	adds	r1, r4, r5
 8002bc0:	42a3      	cmp	r3, r4
 8002bc2:	6025      	str	r5, [r4, #0]
 8002bc4:	bf18      	it	ne
 8002bc6:	6059      	strne	r1, [r3, #4]
 8002bc8:	6863      	ldr	r3, [r4, #4]
 8002bca:	bf08      	it	eq
 8002bcc:	f8c8 1000 	streq.w	r1, [r8]
 8002bd0:	5162      	str	r2, [r4, r5]
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	f104 060b 	add.w	r6, r4, #11
 8002bda:	f000 f829 	bl	8002c30 <__malloc_unlock>
 8002bde:	f026 0607 	bic.w	r6, r6, #7
 8002be2:	1d23      	adds	r3, r4, #4
 8002be4:	1af2      	subs	r2, r6, r3
 8002be6:	d0ae      	beq.n	8002b46 <_malloc_r+0x22>
 8002be8:	1b9b      	subs	r3, r3, r6
 8002bea:	50a3      	str	r3, [r4, r2]
 8002bec:	e7ab      	b.n	8002b46 <_malloc_r+0x22>
 8002bee:	42a3      	cmp	r3, r4
 8002bf0:	6862      	ldr	r2, [r4, #4]
 8002bf2:	d1dd      	bne.n	8002bb0 <_malloc_r+0x8c>
 8002bf4:	f8c8 2000 	str.w	r2, [r8]
 8002bf8:	e7ec      	b.n	8002bd4 <_malloc_r+0xb0>
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	6864      	ldr	r4, [r4, #4]
 8002bfe:	e7ac      	b.n	8002b5a <_malloc_r+0x36>
 8002c00:	4634      	mov	r4, r6
 8002c02:	6876      	ldr	r6, [r6, #4]
 8002c04:	e7b4      	b.n	8002b70 <_malloc_r+0x4c>
 8002c06:	4613      	mov	r3, r2
 8002c08:	e7cc      	b.n	8002ba4 <_malloc_r+0x80>
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4638      	mov	r0, r7
 8002c10:	f000 f80e 	bl	8002c30 <__malloc_unlock>
 8002c14:	e797      	b.n	8002b46 <_malloc_r+0x22>
 8002c16:	6025      	str	r5, [r4, #0]
 8002c18:	e7dc      	b.n	8002bd4 <_malloc_r+0xb0>
 8002c1a:	605b      	str	r3, [r3, #4]
 8002c1c:	deff      	udf	#255	; 0xff
 8002c1e:	bf00      	nop
 8002c20:	20001310 	.word	0x20001310

08002c24 <__malloc_lock>:
 8002c24:	4801      	ldr	r0, [pc, #4]	; (8002c2c <__malloc_lock+0x8>)
 8002c26:	f7ff bf01 	b.w	8002a2c <__retarget_lock_acquire_recursive>
 8002c2a:	bf00      	nop
 8002c2c:	2000130c 	.word	0x2000130c

08002c30 <__malloc_unlock>:
 8002c30:	4801      	ldr	r0, [pc, #4]	; (8002c38 <__malloc_unlock+0x8>)
 8002c32:	f7ff befc 	b.w	8002a2e <__retarget_lock_release_recursive>
 8002c36:	bf00      	nop
 8002c38:	2000130c 	.word	0x2000130c

08002c3c <__ssputs_r>:
 8002c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c40:	688e      	ldr	r6, [r1, #8]
 8002c42:	461f      	mov	r7, r3
 8002c44:	42be      	cmp	r6, r7
 8002c46:	680b      	ldr	r3, [r1, #0]
 8002c48:	4682      	mov	sl, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4690      	mov	r8, r2
 8002c4e:	d82c      	bhi.n	8002caa <__ssputs_r+0x6e>
 8002c50:	898a      	ldrh	r2, [r1, #12]
 8002c52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c56:	d026      	beq.n	8002ca6 <__ssputs_r+0x6a>
 8002c58:	6965      	ldr	r5, [r4, #20]
 8002c5a:	6909      	ldr	r1, [r1, #16]
 8002c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c60:	eba3 0901 	sub.w	r9, r3, r1
 8002c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c68:	1c7b      	adds	r3, r7, #1
 8002c6a:	444b      	add	r3, r9
 8002c6c:	106d      	asrs	r5, r5, #1
 8002c6e:	429d      	cmp	r5, r3
 8002c70:	bf38      	it	cc
 8002c72:	461d      	movcc	r5, r3
 8002c74:	0553      	lsls	r3, r2, #21
 8002c76:	d527      	bpl.n	8002cc8 <__ssputs_r+0x8c>
 8002c78:	4629      	mov	r1, r5
 8002c7a:	f7ff ff53 	bl	8002b24 <_malloc_r>
 8002c7e:	4606      	mov	r6, r0
 8002c80:	b360      	cbz	r0, 8002cdc <__ssputs_r+0xa0>
 8002c82:	6921      	ldr	r1, [r4, #16]
 8002c84:	464a      	mov	r2, r9
 8002c86:	f7ff fed3 	bl	8002a30 <memcpy>
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	81a3      	strh	r3, [r4, #12]
 8002c96:	6126      	str	r6, [r4, #16]
 8002c98:	6165      	str	r5, [r4, #20]
 8002c9a:	444e      	add	r6, r9
 8002c9c:	eba5 0509 	sub.w	r5, r5, r9
 8002ca0:	6026      	str	r6, [r4, #0]
 8002ca2:	60a5      	str	r5, [r4, #8]
 8002ca4:	463e      	mov	r6, r7
 8002ca6:	42be      	cmp	r6, r7
 8002ca8:	d900      	bls.n	8002cac <__ssputs_r+0x70>
 8002caa:	463e      	mov	r6, r7
 8002cac:	6820      	ldr	r0, [r4, #0]
 8002cae:	4632      	mov	r2, r6
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	f000 faab 	bl	800320c <memmove>
 8002cb6:	68a3      	ldr	r3, [r4, #8]
 8002cb8:	1b9b      	subs	r3, r3, r6
 8002cba:	60a3      	str	r3, [r4, #8]
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	4433      	add	r3, r6
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc8:	462a      	mov	r2, r5
 8002cca:	f000 fac9 	bl	8003260 <_realloc_r>
 8002cce:	4606      	mov	r6, r0
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d1e0      	bne.n	8002c96 <__ssputs_r+0x5a>
 8002cd4:	6921      	ldr	r1, [r4, #16]
 8002cd6:	4650      	mov	r0, sl
 8002cd8:	f7ff feb8 	bl	8002a4c <_free_r>
 8002cdc:	230c      	movs	r3, #12
 8002cde:	f8ca 3000 	str.w	r3, [sl]
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce8:	81a3      	strh	r3, [r4, #12]
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
 8002cee:	e7e9      	b.n	8002cc4 <__ssputs_r+0x88>

08002cf0 <_svfiprintf_r>:
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	4698      	mov	r8, r3
 8002cf6:	898b      	ldrh	r3, [r1, #12]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	b09d      	sub	sp, #116	; 0x74
 8002cfc:	4607      	mov	r7, r0
 8002cfe:	460d      	mov	r5, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	d50e      	bpl.n	8002d22 <_svfiprintf_r+0x32>
 8002d04:	690b      	ldr	r3, [r1, #16]
 8002d06:	b963      	cbnz	r3, 8002d22 <_svfiprintf_r+0x32>
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	f7ff ff0b 	bl	8002b24 <_malloc_r>
 8002d0e:	6028      	str	r0, [r5, #0]
 8002d10:	6128      	str	r0, [r5, #16]
 8002d12:	b920      	cbnz	r0, 8002d1e <_svfiprintf_r+0x2e>
 8002d14:	230c      	movs	r3, #12
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	e0d0      	b.n	8002ec0 <_svfiprintf_r+0x1d0>
 8002d1e:	2340      	movs	r3, #64	; 0x40
 8002d20:	616b      	str	r3, [r5, #20]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9309      	str	r3, [sp, #36]	; 0x24
 8002d26:	2320      	movs	r3, #32
 8002d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d30:	2330      	movs	r3, #48	; 0x30
 8002d32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ed8 <_svfiprintf_r+0x1e8>
 8002d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d3a:	f04f 0901 	mov.w	r9, #1
 8002d3e:	4623      	mov	r3, r4
 8002d40:	469a      	mov	sl, r3
 8002d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d46:	b10a      	cbz	r2, 8002d4c <_svfiprintf_r+0x5c>
 8002d48:	2a25      	cmp	r2, #37	; 0x25
 8002d4a:	d1f9      	bne.n	8002d40 <_svfiprintf_r+0x50>
 8002d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d50:	d00b      	beq.n	8002d6a <_svfiprintf_r+0x7a>
 8002d52:	465b      	mov	r3, fp
 8002d54:	4622      	mov	r2, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	4638      	mov	r0, r7
 8002d5a:	f7ff ff6f 	bl	8002c3c <__ssputs_r>
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f000 80a9 	beq.w	8002eb6 <_svfiprintf_r+0x1c6>
 8002d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d66:	445a      	add	r2, fp
 8002d68:	9209      	str	r2, [sp, #36]	; 0x24
 8002d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80a1 	beq.w	8002eb6 <_svfiprintf_r+0x1c6>
 8002d74:	2300      	movs	r3, #0
 8002d76:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d7e:	f10a 0a01 	add.w	sl, sl, #1
 8002d82:	9304      	str	r3, [sp, #16]
 8002d84:	9307      	str	r3, [sp, #28]
 8002d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8002d8c:	4654      	mov	r4, sl
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d94:	4850      	ldr	r0, [pc, #320]	; (8002ed8 <_svfiprintf_r+0x1e8>)
 8002d96:	f7fd fa1b 	bl	80001d0 <memchr>
 8002d9a:	9a04      	ldr	r2, [sp, #16]
 8002d9c:	b9d8      	cbnz	r0, 8002dd6 <_svfiprintf_r+0xe6>
 8002d9e:	06d0      	lsls	r0, r2, #27
 8002da0:	bf44      	itt	mi
 8002da2:	2320      	movmi	r3, #32
 8002da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002da8:	0711      	lsls	r1, r2, #28
 8002daa:	bf44      	itt	mi
 8002dac:	232b      	movmi	r3, #43	; 0x2b
 8002dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002db2:	f89a 3000 	ldrb.w	r3, [sl]
 8002db6:	2b2a      	cmp	r3, #42	; 0x2a
 8002db8:	d015      	beq.n	8002de6 <_svfiprintf_r+0xf6>
 8002dba:	9a07      	ldr	r2, [sp, #28]
 8002dbc:	4654      	mov	r4, sl
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f04f 0c0a 	mov.w	ip, #10
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dca:	3b30      	subs	r3, #48	; 0x30
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d94d      	bls.n	8002e6c <_svfiprintf_r+0x17c>
 8002dd0:	b1b0      	cbz	r0, 8002e00 <_svfiprintf_r+0x110>
 8002dd2:	9207      	str	r2, [sp, #28]
 8002dd4:	e014      	b.n	8002e00 <_svfiprintf_r+0x110>
 8002dd6:	eba0 0308 	sub.w	r3, r0, r8
 8002dda:	fa09 f303 	lsl.w	r3, r9, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	9304      	str	r3, [sp, #16]
 8002de2:	46a2      	mov	sl, r4
 8002de4:	e7d2      	b.n	8002d8c <_svfiprintf_r+0x9c>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	1d19      	adds	r1, r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	9103      	str	r1, [sp, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bfbb      	ittet	lt
 8002df2:	425b      	neglt	r3, r3
 8002df4:	f042 0202 	orrlt.w	r2, r2, #2
 8002df8:	9307      	strge	r3, [sp, #28]
 8002dfa:	9307      	strlt	r3, [sp, #28]
 8002dfc:	bfb8      	it	lt
 8002dfe:	9204      	strlt	r2, [sp, #16]
 8002e00:	7823      	ldrb	r3, [r4, #0]
 8002e02:	2b2e      	cmp	r3, #46	; 0x2e
 8002e04:	d10c      	bne.n	8002e20 <_svfiprintf_r+0x130>
 8002e06:	7863      	ldrb	r3, [r4, #1]
 8002e08:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0a:	d134      	bne.n	8002e76 <_svfiprintf_r+0x186>
 8002e0c:	9b03      	ldr	r3, [sp, #12]
 8002e0e:	1d1a      	adds	r2, r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	9203      	str	r2, [sp, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bfb8      	it	lt
 8002e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e1c:	3402      	adds	r4, #2
 8002e1e:	9305      	str	r3, [sp, #20]
 8002e20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002ee8 <_svfiprintf_r+0x1f8>
 8002e24:	7821      	ldrb	r1, [r4, #0]
 8002e26:	2203      	movs	r2, #3
 8002e28:	4650      	mov	r0, sl
 8002e2a:	f7fd f9d1 	bl	80001d0 <memchr>
 8002e2e:	b138      	cbz	r0, 8002e40 <_svfiprintf_r+0x150>
 8002e30:	9b04      	ldr	r3, [sp, #16]
 8002e32:	eba0 000a 	sub.w	r0, r0, sl
 8002e36:	2240      	movs	r2, #64	; 0x40
 8002e38:	4082      	lsls	r2, r0
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	3401      	adds	r4, #1
 8002e3e:	9304      	str	r3, [sp, #16]
 8002e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e44:	4825      	ldr	r0, [pc, #148]	; (8002edc <_svfiprintf_r+0x1ec>)
 8002e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e4a:	2206      	movs	r2, #6
 8002e4c:	f7fd f9c0 	bl	80001d0 <memchr>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d038      	beq.n	8002ec6 <_svfiprintf_r+0x1d6>
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <_svfiprintf_r+0x1f0>)
 8002e56:	bb1b      	cbnz	r3, 8002ea0 <_svfiprintf_r+0x1b0>
 8002e58:	9b03      	ldr	r3, [sp, #12]
 8002e5a:	3307      	adds	r3, #7
 8002e5c:	f023 0307 	bic.w	r3, r3, #7
 8002e60:	3308      	adds	r3, #8
 8002e62:	9303      	str	r3, [sp, #12]
 8002e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e66:	4433      	add	r3, r6
 8002e68:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6a:	e768      	b.n	8002d3e <_svfiprintf_r+0x4e>
 8002e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e70:	460c      	mov	r4, r1
 8002e72:	2001      	movs	r0, #1
 8002e74:	e7a6      	b.n	8002dc4 <_svfiprintf_r+0xd4>
 8002e76:	2300      	movs	r3, #0
 8002e78:	3401      	adds	r4, #1
 8002e7a:	9305      	str	r3, [sp, #20]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 0c0a 	mov.w	ip, #10
 8002e82:	4620      	mov	r0, r4
 8002e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e88:	3a30      	subs	r2, #48	; 0x30
 8002e8a:	2a09      	cmp	r2, #9
 8002e8c:	d903      	bls.n	8002e96 <_svfiprintf_r+0x1a6>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0c6      	beq.n	8002e20 <_svfiprintf_r+0x130>
 8002e92:	9105      	str	r1, [sp, #20]
 8002e94:	e7c4      	b.n	8002e20 <_svfiprintf_r+0x130>
 8002e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e7f0      	b.n	8002e82 <_svfiprintf_r+0x192>
 8002ea0:	ab03      	add	r3, sp, #12
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	462a      	mov	r2, r5
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <_svfiprintf_r+0x1f4>)
 8002ea8:	a904      	add	r1, sp, #16
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f3af 8000 	nop.w
 8002eb0:	1c42      	adds	r2, r0, #1
 8002eb2:	4606      	mov	r6, r0
 8002eb4:	d1d6      	bne.n	8002e64 <_svfiprintf_r+0x174>
 8002eb6:	89ab      	ldrh	r3, [r5, #12]
 8002eb8:	065b      	lsls	r3, r3, #25
 8002eba:	f53f af2d 	bmi.w	8002d18 <_svfiprintf_r+0x28>
 8002ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ec0:	b01d      	add	sp, #116	; 0x74
 8002ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec6:	ab03      	add	r3, sp, #12
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	462a      	mov	r2, r5
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <_svfiprintf_r+0x1f4>)
 8002ece:	a904      	add	r1, sp, #16
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f000 f879 	bl	8002fc8 <_printf_i>
 8002ed6:	e7eb      	b.n	8002eb0 <_svfiprintf_r+0x1c0>
 8002ed8:	08003518 	.word	0x08003518
 8002edc:	08003522 	.word	0x08003522
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	08002c3d 	.word	0x08002c3d
 8002ee8:	0800351e 	.word	0x0800351e

08002eec <_printf_common>:
 8002eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef0:	4616      	mov	r6, r2
 8002ef2:	4699      	mov	r9, r3
 8002ef4:	688a      	ldr	r2, [r1, #8]
 8002ef6:	690b      	ldr	r3, [r1, #16]
 8002ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bfb8      	it	lt
 8002f00:	4613      	movlt	r3, r2
 8002f02:	6033      	str	r3, [r6, #0]
 8002f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f08:	4607      	mov	r7, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	b10a      	cbz	r2, 8002f12 <_printf_common+0x26>
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6033      	str	r3, [r6, #0]
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	0699      	lsls	r1, r3, #26
 8002f16:	bf42      	ittt	mi
 8002f18:	6833      	ldrmi	r3, [r6, #0]
 8002f1a:	3302      	addmi	r3, #2
 8002f1c:	6033      	strmi	r3, [r6, #0]
 8002f1e:	6825      	ldr	r5, [r4, #0]
 8002f20:	f015 0506 	ands.w	r5, r5, #6
 8002f24:	d106      	bne.n	8002f34 <_printf_common+0x48>
 8002f26:	f104 0a19 	add.w	sl, r4, #25
 8002f2a:	68e3      	ldr	r3, [r4, #12]
 8002f2c:	6832      	ldr	r2, [r6, #0]
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	42ab      	cmp	r3, r5
 8002f32:	dc26      	bgt.n	8002f82 <_printf_common+0x96>
 8002f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f38:	1e13      	subs	r3, r2, #0
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	bf18      	it	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	0692      	lsls	r2, r2, #26
 8002f42:	d42b      	bmi.n	8002f9c <_printf_common+0xb0>
 8002f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f48:	4649      	mov	r1, r9
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	47c0      	blx	r8
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d01e      	beq.n	8002f90 <_printf_common+0xa4>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	6922      	ldr	r2, [r4, #16]
 8002f56:	f003 0306 	and.w	r3, r3, #6
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf02      	ittt	eq
 8002f5e:	68e5      	ldreq	r5, [r4, #12]
 8002f60:	6833      	ldreq	r3, [r6, #0]
 8002f62:	1aed      	subeq	r5, r5, r3
 8002f64:	68a3      	ldr	r3, [r4, #8]
 8002f66:	bf0c      	ite	eq
 8002f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f6c:	2500      	movne	r5, #0
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	bfc4      	itt	gt
 8002f72:	1a9b      	subgt	r3, r3, r2
 8002f74:	18ed      	addgt	r5, r5, r3
 8002f76:	2600      	movs	r6, #0
 8002f78:	341a      	adds	r4, #26
 8002f7a:	42b5      	cmp	r5, r6
 8002f7c:	d11a      	bne.n	8002fb4 <_printf_common+0xc8>
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e008      	b.n	8002f94 <_printf_common+0xa8>
 8002f82:	2301      	movs	r3, #1
 8002f84:	4652      	mov	r2, sl
 8002f86:	4649      	mov	r1, r9
 8002f88:	4638      	mov	r0, r7
 8002f8a:	47c0      	blx	r8
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d103      	bne.n	8002f98 <_printf_common+0xac>
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f98:	3501      	adds	r5, #1
 8002f9a:	e7c6      	b.n	8002f2a <_printf_common+0x3e>
 8002f9c:	18e1      	adds	r1, r4, r3
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	2030      	movs	r0, #48	; 0x30
 8002fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fa6:	4422      	add	r2, r4
 8002fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	e7c7      	b.n	8002f44 <_printf_common+0x58>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	4649      	mov	r1, r9
 8002fba:	4638      	mov	r0, r7
 8002fbc:	47c0      	blx	r8
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d0e6      	beq.n	8002f90 <_printf_common+0xa4>
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7d9      	b.n	8002f7a <_printf_common+0x8e>
	...

08002fc8 <_printf_i>:
 8002fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fcc:	7e0f      	ldrb	r7, [r1, #24]
 8002fce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fd0:	2f78      	cmp	r7, #120	; 0x78
 8002fd2:	4691      	mov	r9, r2
 8002fd4:	4680      	mov	r8, r0
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	469a      	mov	sl, r3
 8002fda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fde:	d807      	bhi.n	8002ff0 <_printf_i+0x28>
 8002fe0:	2f62      	cmp	r7, #98	; 0x62
 8002fe2:	d80a      	bhi.n	8002ffa <_printf_i+0x32>
 8002fe4:	2f00      	cmp	r7, #0
 8002fe6:	f000 80d4 	beq.w	8003192 <_printf_i+0x1ca>
 8002fea:	2f58      	cmp	r7, #88	; 0x58
 8002fec:	f000 80c0 	beq.w	8003170 <_printf_i+0x1a8>
 8002ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ff8:	e03a      	b.n	8003070 <_printf_i+0xa8>
 8002ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ffe:	2b15      	cmp	r3, #21
 8003000:	d8f6      	bhi.n	8002ff0 <_printf_i+0x28>
 8003002:	a101      	add	r1, pc, #4	; (adr r1, 8003008 <_printf_i+0x40>)
 8003004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003008:	08003061 	.word	0x08003061
 800300c:	08003075 	.word	0x08003075
 8003010:	08002ff1 	.word	0x08002ff1
 8003014:	08002ff1 	.word	0x08002ff1
 8003018:	08002ff1 	.word	0x08002ff1
 800301c:	08002ff1 	.word	0x08002ff1
 8003020:	08003075 	.word	0x08003075
 8003024:	08002ff1 	.word	0x08002ff1
 8003028:	08002ff1 	.word	0x08002ff1
 800302c:	08002ff1 	.word	0x08002ff1
 8003030:	08002ff1 	.word	0x08002ff1
 8003034:	08003179 	.word	0x08003179
 8003038:	080030a1 	.word	0x080030a1
 800303c:	08003133 	.word	0x08003133
 8003040:	08002ff1 	.word	0x08002ff1
 8003044:	08002ff1 	.word	0x08002ff1
 8003048:	0800319b 	.word	0x0800319b
 800304c:	08002ff1 	.word	0x08002ff1
 8003050:	080030a1 	.word	0x080030a1
 8003054:	08002ff1 	.word	0x08002ff1
 8003058:	08002ff1 	.word	0x08002ff1
 800305c:	0800313b 	.word	0x0800313b
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	602a      	str	r2, [r5, #0]
 8003068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800306c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003070:	2301      	movs	r3, #1
 8003072:	e09f      	b.n	80031b4 <_printf_i+0x1ec>
 8003074:	6820      	ldr	r0, [r4, #0]
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	0607      	lsls	r7, r0, #24
 800307a:	f103 0104 	add.w	r1, r3, #4
 800307e:	6029      	str	r1, [r5, #0]
 8003080:	d501      	bpl.n	8003086 <_printf_i+0xbe>
 8003082:	681e      	ldr	r6, [r3, #0]
 8003084:	e003      	b.n	800308e <_printf_i+0xc6>
 8003086:	0646      	lsls	r6, r0, #25
 8003088:	d5fb      	bpl.n	8003082 <_printf_i+0xba>
 800308a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800308e:	2e00      	cmp	r6, #0
 8003090:	da03      	bge.n	800309a <_printf_i+0xd2>
 8003092:	232d      	movs	r3, #45	; 0x2d
 8003094:	4276      	negs	r6, r6
 8003096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800309a:	485a      	ldr	r0, [pc, #360]	; (8003204 <_printf_i+0x23c>)
 800309c:	230a      	movs	r3, #10
 800309e:	e012      	b.n	80030c6 <_printf_i+0xfe>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	6820      	ldr	r0, [r4, #0]
 80030a4:	1d19      	adds	r1, r3, #4
 80030a6:	6029      	str	r1, [r5, #0]
 80030a8:	0605      	lsls	r5, r0, #24
 80030aa:	d501      	bpl.n	80030b0 <_printf_i+0xe8>
 80030ac:	681e      	ldr	r6, [r3, #0]
 80030ae:	e002      	b.n	80030b6 <_printf_i+0xee>
 80030b0:	0641      	lsls	r1, r0, #25
 80030b2:	d5fb      	bpl.n	80030ac <_printf_i+0xe4>
 80030b4:	881e      	ldrh	r6, [r3, #0]
 80030b6:	4853      	ldr	r0, [pc, #332]	; (8003204 <_printf_i+0x23c>)
 80030b8:	2f6f      	cmp	r7, #111	; 0x6f
 80030ba:	bf0c      	ite	eq
 80030bc:	2308      	moveq	r3, #8
 80030be:	230a      	movne	r3, #10
 80030c0:	2100      	movs	r1, #0
 80030c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030c6:	6865      	ldr	r5, [r4, #4]
 80030c8:	60a5      	str	r5, [r4, #8]
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	bfa2      	ittt	ge
 80030ce:	6821      	ldrge	r1, [r4, #0]
 80030d0:	f021 0104 	bicge.w	r1, r1, #4
 80030d4:	6021      	strge	r1, [r4, #0]
 80030d6:	b90e      	cbnz	r6, 80030dc <_printf_i+0x114>
 80030d8:	2d00      	cmp	r5, #0
 80030da:	d04b      	beq.n	8003174 <_printf_i+0x1ac>
 80030dc:	4615      	mov	r5, r2
 80030de:	fbb6 f1f3 	udiv	r1, r6, r3
 80030e2:	fb03 6711 	mls	r7, r3, r1, r6
 80030e6:	5dc7      	ldrb	r7, [r0, r7]
 80030e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030ec:	4637      	mov	r7, r6
 80030ee:	42bb      	cmp	r3, r7
 80030f0:	460e      	mov	r6, r1
 80030f2:	d9f4      	bls.n	80030de <_printf_i+0x116>
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d10b      	bne.n	8003110 <_printf_i+0x148>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	07de      	lsls	r6, r3, #31
 80030fc:	d508      	bpl.n	8003110 <_printf_i+0x148>
 80030fe:	6923      	ldr	r3, [r4, #16]
 8003100:	6861      	ldr	r1, [r4, #4]
 8003102:	4299      	cmp	r1, r3
 8003104:	bfde      	ittt	le
 8003106:	2330      	movle	r3, #48	; 0x30
 8003108:	f805 3c01 	strble.w	r3, [r5, #-1]
 800310c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003110:	1b52      	subs	r2, r2, r5
 8003112:	6122      	str	r2, [r4, #16]
 8003114:	f8cd a000 	str.w	sl, [sp]
 8003118:	464b      	mov	r3, r9
 800311a:	aa03      	add	r2, sp, #12
 800311c:	4621      	mov	r1, r4
 800311e:	4640      	mov	r0, r8
 8003120:	f7ff fee4 	bl	8002eec <_printf_common>
 8003124:	3001      	adds	r0, #1
 8003126:	d14a      	bne.n	80031be <_printf_i+0x1f6>
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	b004      	add	sp, #16
 800312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	f043 0320 	orr.w	r3, r3, #32
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	4833      	ldr	r0, [pc, #204]	; (8003208 <_printf_i+0x240>)
 800313c:	2778      	movs	r7, #120	; 0x78
 800313e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	6829      	ldr	r1, [r5, #0]
 8003146:	061f      	lsls	r7, r3, #24
 8003148:	f851 6b04 	ldr.w	r6, [r1], #4
 800314c:	d402      	bmi.n	8003154 <_printf_i+0x18c>
 800314e:	065f      	lsls	r7, r3, #25
 8003150:	bf48      	it	mi
 8003152:	b2b6      	uxthmi	r6, r6
 8003154:	07df      	lsls	r7, r3, #31
 8003156:	bf48      	it	mi
 8003158:	f043 0320 	orrmi.w	r3, r3, #32
 800315c:	6029      	str	r1, [r5, #0]
 800315e:	bf48      	it	mi
 8003160:	6023      	strmi	r3, [r4, #0]
 8003162:	b91e      	cbnz	r6, 800316c <_printf_i+0x1a4>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	f023 0320 	bic.w	r3, r3, #32
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	2310      	movs	r3, #16
 800316e:	e7a7      	b.n	80030c0 <_printf_i+0xf8>
 8003170:	4824      	ldr	r0, [pc, #144]	; (8003204 <_printf_i+0x23c>)
 8003172:	e7e4      	b.n	800313e <_printf_i+0x176>
 8003174:	4615      	mov	r5, r2
 8003176:	e7bd      	b.n	80030f4 <_printf_i+0x12c>
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	6826      	ldr	r6, [r4, #0]
 800317c:	6961      	ldr	r1, [r4, #20]
 800317e:	1d18      	adds	r0, r3, #4
 8003180:	6028      	str	r0, [r5, #0]
 8003182:	0635      	lsls	r5, r6, #24
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	d501      	bpl.n	800318c <_printf_i+0x1c4>
 8003188:	6019      	str	r1, [r3, #0]
 800318a:	e002      	b.n	8003192 <_printf_i+0x1ca>
 800318c:	0670      	lsls	r0, r6, #25
 800318e:	d5fb      	bpl.n	8003188 <_printf_i+0x1c0>
 8003190:	8019      	strh	r1, [r3, #0]
 8003192:	2300      	movs	r3, #0
 8003194:	6123      	str	r3, [r4, #16]
 8003196:	4615      	mov	r5, r2
 8003198:	e7bc      	b.n	8003114 <_printf_i+0x14c>
 800319a:	682b      	ldr	r3, [r5, #0]
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	602a      	str	r2, [r5, #0]
 80031a0:	681d      	ldr	r5, [r3, #0]
 80031a2:	6862      	ldr	r2, [r4, #4]
 80031a4:	2100      	movs	r1, #0
 80031a6:	4628      	mov	r0, r5
 80031a8:	f7fd f812 	bl	80001d0 <memchr>
 80031ac:	b108      	cbz	r0, 80031b2 <_printf_i+0x1ea>
 80031ae:	1b40      	subs	r0, r0, r5
 80031b0:	6060      	str	r0, [r4, #4]
 80031b2:	6863      	ldr	r3, [r4, #4]
 80031b4:	6123      	str	r3, [r4, #16]
 80031b6:	2300      	movs	r3, #0
 80031b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031bc:	e7aa      	b.n	8003114 <_printf_i+0x14c>
 80031be:	6923      	ldr	r3, [r4, #16]
 80031c0:	462a      	mov	r2, r5
 80031c2:	4649      	mov	r1, r9
 80031c4:	4640      	mov	r0, r8
 80031c6:	47d0      	blx	sl
 80031c8:	3001      	adds	r0, #1
 80031ca:	d0ad      	beq.n	8003128 <_printf_i+0x160>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	079b      	lsls	r3, r3, #30
 80031d0:	d413      	bmi.n	80031fa <_printf_i+0x232>
 80031d2:	68e0      	ldr	r0, [r4, #12]
 80031d4:	9b03      	ldr	r3, [sp, #12]
 80031d6:	4298      	cmp	r0, r3
 80031d8:	bfb8      	it	lt
 80031da:	4618      	movlt	r0, r3
 80031dc:	e7a6      	b.n	800312c <_printf_i+0x164>
 80031de:	2301      	movs	r3, #1
 80031e0:	4632      	mov	r2, r6
 80031e2:	4649      	mov	r1, r9
 80031e4:	4640      	mov	r0, r8
 80031e6:	47d0      	blx	sl
 80031e8:	3001      	adds	r0, #1
 80031ea:	d09d      	beq.n	8003128 <_printf_i+0x160>
 80031ec:	3501      	adds	r5, #1
 80031ee:	68e3      	ldr	r3, [r4, #12]
 80031f0:	9903      	ldr	r1, [sp, #12]
 80031f2:	1a5b      	subs	r3, r3, r1
 80031f4:	42ab      	cmp	r3, r5
 80031f6:	dcf2      	bgt.n	80031de <_printf_i+0x216>
 80031f8:	e7eb      	b.n	80031d2 <_printf_i+0x20a>
 80031fa:	2500      	movs	r5, #0
 80031fc:	f104 0619 	add.w	r6, r4, #25
 8003200:	e7f5      	b.n	80031ee <_printf_i+0x226>
 8003202:	bf00      	nop
 8003204:	08003529 	.word	0x08003529
 8003208:	0800353a 	.word	0x0800353a

0800320c <memmove>:
 800320c:	4288      	cmp	r0, r1
 800320e:	b510      	push	{r4, lr}
 8003210:	eb01 0402 	add.w	r4, r1, r2
 8003214:	d902      	bls.n	800321c <memmove+0x10>
 8003216:	4284      	cmp	r4, r0
 8003218:	4623      	mov	r3, r4
 800321a:	d807      	bhi.n	800322c <memmove+0x20>
 800321c:	1e43      	subs	r3, r0, #1
 800321e:	42a1      	cmp	r1, r4
 8003220:	d008      	beq.n	8003234 <memmove+0x28>
 8003222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800322a:	e7f8      	b.n	800321e <memmove+0x12>
 800322c:	4402      	add	r2, r0
 800322e:	4601      	mov	r1, r0
 8003230:	428a      	cmp	r2, r1
 8003232:	d100      	bne.n	8003236 <memmove+0x2a>
 8003234:	bd10      	pop	{r4, pc}
 8003236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800323a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800323e:	e7f7      	b.n	8003230 <memmove+0x24>

08003240 <_sbrk_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4d06      	ldr	r5, [pc, #24]	; (800325c <_sbrk_r+0x1c>)
 8003244:	2300      	movs	r3, #0
 8003246:	4604      	mov	r4, r0
 8003248:	4608      	mov	r0, r1
 800324a:	602b      	str	r3, [r5, #0]
 800324c:	f7fe f816 	bl	800127c <_sbrk>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d102      	bne.n	800325a <_sbrk_r+0x1a>
 8003254:	682b      	ldr	r3, [r5, #0]
 8003256:	b103      	cbz	r3, 800325a <_sbrk_r+0x1a>
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	20001308 	.word	0x20001308

08003260 <_realloc_r>:
 8003260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003264:	4680      	mov	r8, r0
 8003266:	4614      	mov	r4, r2
 8003268:	460e      	mov	r6, r1
 800326a:	b921      	cbnz	r1, 8003276 <_realloc_r+0x16>
 800326c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003270:	4611      	mov	r1, r2
 8003272:	f7ff bc57 	b.w	8002b24 <_malloc_r>
 8003276:	b92a      	cbnz	r2, 8003284 <_realloc_r+0x24>
 8003278:	f7ff fbe8 	bl	8002a4c <_free_r>
 800327c:	4625      	mov	r5, r4
 800327e:	4628      	mov	r0, r5
 8003280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003284:	f000 f81b 	bl	80032be <_malloc_usable_size_r>
 8003288:	4284      	cmp	r4, r0
 800328a:	4607      	mov	r7, r0
 800328c:	d802      	bhi.n	8003294 <_realloc_r+0x34>
 800328e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003292:	d812      	bhi.n	80032ba <_realloc_r+0x5a>
 8003294:	4621      	mov	r1, r4
 8003296:	4640      	mov	r0, r8
 8003298:	f7ff fc44 	bl	8002b24 <_malloc_r>
 800329c:	4605      	mov	r5, r0
 800329e:	2800      	cmp	r0, #0
 80032a0:	d0ed      	beq.n	800327e <_realloc_r+0x1e>
 80032a2:	42bc      	cmp	r4, r7
 80032a4:	4622      	mov	r2, r4
 80032a6:	4631      	mov	r1, r6
 80032a8:	bf28      	it	cs
 80032aa:	463a      	movcs	r2, r7
 80032ac:	f7ff fbc0 	bl	8002a30 <memcpy>
 80032b0:	4631      	mov	r1, r6
 80032b2:	4640      	mov	r0, r8
 80032b4:	f7ff fbca 	bl	8002a4c <_free_r>
 80032b8:	e7e1      	b.n	800327e <_realloc_r+0x1e>
 80032ba:	4635      	mov	r5, r6
 80032bc:	e7df      	b.n	800327e <_realloc_r+0x1e>

080032be <_malloc_usable_size_r>:
 80032be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c2:	1f18      	subs	r0, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bfbc      	itt	lt
 80032c8:	580b      	ldrlt	r3, [r1, r0]
 80032ca:	18c0      	addlt	r0, r0, r3
 80032cc:	4770      	bx	lr
	...

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
